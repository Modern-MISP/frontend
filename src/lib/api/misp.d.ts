/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/attributes/restSearch': {
    /**
     * [restSearch] Get a filtered and paginated list of attributes
     * @description **This is the recommended endpoint for searching attributes.**
     */
    post: operations['restSearchAttributes'];
  };
  '/attributes/add/{eventId}': {
    /** Add an attribute */
    post: operations['addAttribute'];
  };
  '/attributes/edit/{attributeId}': {
    /** Edit an attribute */
    put: operations['editAttribute'];
  };
  '/attributes/delete/{attributeId}': {
    /** Delete an attribute */
    delete: operations['deleteAttribute'];
  };
  '/attributes/restore/{attributeId}': {
    /** Restore an attribute */
    post: operations['restoreAttribute'];
  };
  '/attributes/addTag/{attributeId}/{tagId}/local:{local}': {
    /** Add a tag to an attribute */
    post: operations['tagAttribute'];
  };
  '/attributes/removeTag/{attributeId}/{tagId}': {
    /** Remove a tag from an attribute */
    post: operations['untagAttribute'];
  };
  '/attributes': {
    /** Get a list of attributes */
    get: operations['getAttributes'];
  };
  '/attributes/view/{attributeId}': {
    /** Get an attribute by ID */
    get: operations['getAttributeById'];
  };
  '/attributes/attributeStatistics/{context}/{percentage}': {
    /** Get the count of attributes per category */
    get: operations['getAttributeStatistics'];
  };
  '/attributes/describeTypes': {
    /** Get a list of the available attribute types */
    get: operations['describeAttributeTypes'];
  };
  '/events/restSearch': {
    /**
     * [restSearch] Get a filtered and paginated list of events
     * @description **This is the recommended endpoint for searching events.**
     */
    post: operations['restSearchEvents'];
  };
  '/events/add': {
    /** Add event */
    post: operations['addEvent'];
  };
  '/events/edit/{eventId}': {
    /** Edit event */
    put: operations['editEvent'];
  };
  '/events/delete/{eventId}': {
    /** Delete event */
    delete: operations['deleteEvent'];
  };
  '/events': {
    /** Get a list of events */
    get: operations['getEvents'];
  };
  '/events/index': {
    /** Search events */
    post: operations['searchEvents'];
  };
  '/events/view/{eventId}': {
    /** Get event by ID */
    get: operations['getEventById'];
  };
  '/events/publish/{eventId}': {
    /** Publish an event */
    post: operations['publishEvent'];
  };
  '/events/unpublish/{eventId}': {
    /** Unpublish an event */
    post: operations['unpublishEvent'];
  };
  '/events/addTag/{eventId}/{tagId}/local:{local}': {
    /** Add event tag */
    post: operations['tagEvent'];
  };
  '/events/removeTag/{eventId}/{tagId}': {
    /** Remove event tag */
    post: operations['untagEvent'];
  };
  '/galaxies': {
    /** Get galaxies */
    get: operations['getGalaxies'];
    /** Search galaxies */
    post: operations['searchGalaxies'];
  };
  '/galaxies/view/{galaxyId}': {
    /** Get galaxy by ID */
    get: operations['getGalaxyById'];
  };
  '/galaxies/update': {
    /** Force update the galaxies with the galaxy json definitions */
    post: operations['updateGalaxies'];
  };
  '/galaxies/delete/{galaxyId}': {
    /** Delete a galaxy */
    delete: operations['deleteGalaxy'];
  };
  '/galaxies/import': {
    /** Import a galaxy cluster */
    post: operations['importGalaxyCluster'];
  };
  '/galaxies/export/{galaxyId}': {
    /** Export galaxy clusters */
    post: operations['exportGalaxyClusters'];
  };
  '/galaxies/attachCluster/{attachTargetId}/{attachTargetType}/local:{local}': {
    /** Attach the galaxy cluster tag a given entity */
    post: operations['attachGalaxyCluster'];
  };
  '/galaxy_clusters/add/{galaxyId}': {
    /** Add galaxy cluster */
    post: operations['addGalaxyCluster'];
  };
  '/galaxy_clusters/edit/{galaxyClusterId}': {
    /** Edit galaxy cluster */
    put: operations['editGalaxyCluster'];
  };
  '/galaxy_clusters/index/{galaxyId}': {
    /** Get galaxy clusters */
    get: operations['getGalaxyClusters'];
    /** Search galaxy clusters */
    post: operations['searchGalaxyClusters'];
  };
  '/galaxy_clusters/view/{galaxyClusterId}': {
    /** Get galaxy cluster by ID */
    get: operations['getGalaxyClusterById'];
  };
  '/galaxy_clusters/publish/{galaxyClusterId}': {
    /** Publish galaxy cluster */
    post: operations['publishGalaxyCluster'];
  };
  '/galaxy_clusters/unpublish/{galaxyClusterId}': {
    /** Unpublish galaxy cluster */
    post: operations['unpublishGalaxyCluster'];
  };
  '/galaxy_clusters/delete/{galaxyClusterId}': {
    /** Delete galaxy cluster */
    post: operations['deleteGalaxyCluster'];
  };
  '/galaxy_clusters/restore/{galaxyClusterId}': {
    /** Restore galaxy cluster */
    post: operations['restoreGalaxyCluster'];
  };
  '/users/initiatePasswordReset/{userId}/{firstTimeReset}': {
    /** Reset user password */
    post: operations['resetUserPassword'];
  };
  '/admin/users/add': {
    /** Add user */
    post: operations['addUser'];
  };
  '/admin/users/edit/{userId}': {
    /** Edit user */
    put: operations['editUser'];
  };
  '/admin/users/delete/{userId}': {
    /** Delete user */
    delete: operations['deleteUser'];
  };
  '/admin/users': {
    /** Get users */
    get: operations['getUsers'];
  };
  '/admin/users/view/{userId}': {
    /** Get user by ID */
    get: operations['getUserById'];
  };
  '/users/totp_delete/{userId}': {
    /** Delete user TOTP */
    delete: operations['deleteUserTotp'];
  };
  '/admin/organisations/add': {
    /** Add organization */
    post: operations['addOrganisation'];
  };
  '/admin/organisations/edit/{organisationId}': {
    /** Edit organization */
    put: operations['editOrganisation'];
  };
  '/admin/organisations/delete/{organisationId}': {
    /** Delete organization */
    delete: operations['deleteOrganisation'];
  };
  '/admin/logs': {
    /** Get instance logs */
    post: operations['getLogs'];
  };
  '/organisations': {
    /** Get organizations */
    get: operations['getOrganisations'];
  };
  '/organisations/view/{organisationId}': {
    /** Get organization by ID */
    get: operations['getOrganisationById'];
  };
  '/servers/add': {
    /** Add server */
    post: operations['addServer'];
  };
  '/servers/edit/{serverId}': {
    /** Edit server */
    put: operations['editServer'];
  };
  '/servers/delete/{serverId}': {
    /** Delete server */
    post: operations['deleteServer'];
  };
  '/servers': {
    /** Get servers */
    get: operations['getServers'];
  };
  '/servers/pull/{serverId}/{pullTechnique}': {
    /** Pull server */
    get: operations['pullServer'];
  };
  '/servers/push/{serverId}/{pushTechnique}': {
    /** Push server */
    get: operations['pushServer'];
  };
  '/servers/getVersion': {
    /** Get current instance version */
    get: operations['getServerVersion'];
  };
  '/servers/getPyMISPVersion': {
    /** Get current instance PyMISP version */
    get: operations['getPyMISPVersion'];
  };
  '/servers/serverSettings': {
    /** Get current instance settings and diagnostics */
    get: operations['getServerSettings'];
  };
  '/servers/getWorkers': {
    /** Get workers */
    get: operations['getWorkers'];
  };
  '/servers/startWorker/{workerType}': {
    /** Start worker */
    post: operations['startWorker'];
  };
  '/servers/stopWorker/{workerPid}': {
    /** Stop worker */
    post: operations['stopWorker'];
  };
  '/servers/killAllWorkers': {
    /** Kill all workers */
    post: operations['killAllWorkers'];
  };
  '/servers/restartWorkers': {
    /** Restart workers */
    post: operations['restartWorkers'];
  };
  '/servers/restartDeadWorkers': {
    /** Restart dead workers */
    post: operations['restartDeadWorkers'];
  };
  '/servers/update': {
    /** Update server */
    post: operations['updateServer'];
  };
  '/servers/cache': {
    /** Cache server */
    post: operations['cacheServer'];
  };
  '/servers/createSync': {
    /** Create sync */
    post: operations['createSync'];
  };
  '/servers/getInstanceUUID': {
    /** Get instance UUID */
    get: operations['getServerUuid'];
  };
  '/servers/getSetting/{settingName}': {
    /** Get server setting by name */
    get: operations['getServerSetting'];
  };
  '/servers/serverSettingsEdit/{settingName}': {
    /** Edit server setting */
    post: operations['editServerSetting'];
  };
  '/servers/import': {
    /** Import server */
    post: operations['importServer'];
  };
  '/sharing_groups/add': {
    /** Add a sharing group */
    post: operations['addSharingGroup'];
  };
  '/sharing_groups/edit/{sharingGroupId}': {
    /** Edit a sharing group */
    post: operations['editSharingGroup'];
  };
  '/sharing_groups/delete/{sharingGroupId}': {
    /** Delete a sharing group */
    delete: operations['deleteSharingGroup'];
  };
  '/sharing_groups': {
    /** Get a list of sharing groups */
    get: operations['getSharingGroup'];
  };
  '/sharing_groups/view/{sharingGroupId}': {
    /** Get a sharing group by ID */
    get: operations['getSharingGroupById'];
  };
  '/sharing_groups/addOrg/{sharingGroupId}/{organisationId}': {
    /** Add an organization to a sharing group */
    post: operations['addOrganisationToSharingGroup'];
  };
  '/sharing_groups/removeOrg/{sharingGroupId}/{organisationId}': {
    /** Remove an organization from a sharing group */
    post: operations['removeOrganisationFromSharingGroup'];
  };
  '/sharing_groups/addServer/{sharingGroupId}/{serverId}': {
    /** Add a server to a sharing group */
    post: operations['addServerToSharingGroup'];
  };
  '/sharing_groups/removeServer/{sharingGroupServerId}/{serverId}': {
    /** Remove a server from a sharing group */
    post: operations['removeServerFromSharingGroup'];
  };
  '/feeds': {
    /** Get a list of feeds */
    get: operations['getFeeds'];
  };
  '/feeds/view/{feedId}': {
    /** Get a feed by ID */
    get: operations['getFeedById'];
  };
  '/feeds/add': {
    /** Add a feed */
    post: operations['addFeed'];
  };
  '/feeds/edit/{feedId}': {
    /** Edit a feed */
    put: operations['editFeed'];
  };
  '/feeds/enable/{feedId}': {
    /** Enable feed */
    post: operations['enableFeed'];
  };
  '/feeds/disable/{feedId}': {
    /** Disable feed */
    post: operations['disableFeed'];
  };
  '/feeds/cacheFeeds/{cacheFeedsScope}': {
    /** Cache feeds */
    post: operations['cacheFeeds'];
  };
  '/feeds/fetchFromFeed/{feedId}': {
    /** Fetch from feed by ID */
    post: operations['fetchFromFeed'];
  };
  '/feeds/fetchFromAllFeeds': {
    /** Fetch from all feeds */
    post: operations['fetchFromAllFeeds'];
  };
  '/warninglists': {
    /** Get a list of warninglists */
    get: operations['getWarninglists'];
    /** Search warninglists */
    post: operations['searchWarninglists'];
  };
  '/warninglists/toggleEnable': {
    /** Enable/disable warninglists */
    post: operations['toggleEnableWarninglist'];
  };
  '/warninglists/view/{warninglistId}': {
    /** Get warninglist by ID */
    get: operations['getWarninglistById'];
  };
  '/warninglists/checkValue': {
    /** Check if a list of values matches any warninglists */
    post: operations['checkValueWarninglistsMatches'];
  };
  '/warninglists/update': {
    /** Update warninglists */
    post: operations['updateWarninglists'];
  };
  '/noticelists': {
    /** Get a list of noticelists */
    get: operations['getNoticelists'];
  };
  '/noticelists/view/{noticelistId}': {
    /** Get a noticelist by ID */
    get: operations['getNoticelistById'];
  };
  '/noticelists/toggleEnable/{noticelistId}': {
    /** Enable/disable noticelist */
    post: operations['toggleEnableNoticelist'];
  };
  '/noticelists/update': {
    /** Update noticelists */
    post: operations['updateNoticelists'];
  };
  '/objects/restsearch': {
    /**
     * [restSearch] Get a filtered and paginated list of objects
     * @description **This is the recommended endpoint for searching objects.**
     */
    post: operations['restSearchObjects'];
  };
  '/objects/add/{eventId}/{objectTemplateId}': {
    /** Add an object to an event */
    post: operations['addObject'];
  };
  '/objects/view/{objectId}': {
    /** Get object by ID */
    get: operations['getObjectById'];
  };
  '/objects/delete/{objectId}/{hardDelete}': {
    /** Delete object */
    delete: operations['deleteObject'];
  };
  '/sightings/index/{eventId}': {
    /** Get sightings by event ID */
    get: operations['getSightingsByEventId'];
  };
  '/sightings/add': {
    /** Add sightings of a list of values */
    post: operations['addSightingByValue'];
  };
  '/sightings/add/{attributeId}': {
    /** Add sighting of an attribute */
    post: operations['addSighting'];
  };
  '/sightings/delete/{sightingId}': {
    /** Delete sighting */
    post: operations['deleteSighting'];
  };
  '/tags': {
    /** Get tags */
    get: operations['getTags'];
  };
  '/tags/view/{tagId}': {
    /** Get tag by ID */
    get: operations['getTagById'];
  };
  '/tags/add': {
    /** Add tag */
    post: operations['addTag'];
  };
  '/tags/delete/{tagId}': {
    /** Delete tag */
    post: operations['deleteTag'];
  };
  '/tags/edit/{tagId}': {
    /** Edit tag */
    post: operations['editTag'];
  };
  '/tags/search/{tagSearchTerm}': {
    /** Search tag */
    get: operations['searchTag'];
  };
  '/auth_keys': {
    /** Get auth keys */
    get: operations['getAuthKeys'];
    /** Search auth keys */
    post: operations['searchAuthKeys'];
  };
  '/auth_keys/add/{userId}': {
    /** Add auth keys */
    post: operations['addAuthKey'];
  };
  '/auth_keys/view/{authKeyId}': {
    /** View auth key */
    get: operations['getAuthKeyById'];
  };
  '/auth_keys/edit/{authKeyId}': {
    /** Edit auth key */
    post: operations['editAuthKey'];
  };
  '/auth_keys/delete/{authKeyId}': {
    /** Delete auth key */
    delete: operations['deleteAuthKey'];
  };
  '/user_settings': {
    /** Get user settings */
    get: operations['getUserSettings'];
    /** Search user settings */
    post: operations['searchUserSettings'];
  };
  '/user_settings/view/{userSettingId}': {
    /** Get user setting by id */
    get: operations['getUserSettingById'];
  };
  '/user_settings/setSetting/{userId}/{userSettingName}': {
    /** Set user setting */
    post: operations['setUserSetting'];
  };
  '/user_settings/getSetting/{userId}/{userSettingName}': {
    /** Get user setting by id */
    get: operations['getUserSettingByName'];
  };
  '/user_settings/delete/{userSettingId}': {
    /** Delete user setting by id */
    delete: operations['deleteUserSettingById'];
  };
  '/taxonomies': {
    /** Get taxonomies */
    get: operations['getTaxonomies'];
  };
  '/taxonomies/view/{taxonomyIdParameter}': {
    /** Get a taxonomy by ID */
    get: operations['getTaxonomyById'];
  };
  '/taxonomies/enable/{taxonomyIdParameter}': {
    /** Enable taxonomy */
    post: operations['enableTaxonomy'];
  };
  '/taxonomies/disable/{taxonomyIdParameter}': {
    /** Disable taxonomy */
    post: operations['disableTaxonomy'];
  };
  '/taxonomies/update': {
    /** Update taxonomies */
    post: operations['updateTaxonomies'];
  };
  '/taxonomies/taxonomy_tags/{taxonomyIdParameter}': {
    /** Get a taxonomy extended with tags used in events and attributes. */
    get: operations['getTaxonomyTags'];
  };
  '/taxonomies/export/{taxonomyIdParameter}': {
    /** Export taxonomy. */
    get: operations['exportTaxonomy'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @example 12345 */
    AttributeId: string;
    /** @enum {string} */
    AttributeType:
      | 'md5'
      | 'sha1'
      | 'sha256'
      | 'filename'
      | 'pdb'
      | 'filename|md5'
      | 'filename|sha1'
      | 'filename|sha256'
      | 'ip-src'
      | 'ip-dst'
      | 'hostname'
      | 'domain'
      | 'domain|ip'
      | 'email'
      | 'email-src'
      | 'eppn'
      | 'email-dst'
      | 'email-subject'
      | 'email-attachment'
      | 'email-body'
      | 'float'
      | 'git-commit-id'
      | 'url'
      | 'http-method'
      | 'user-agent'
      | 'ja3-fingerprint-md5'
      | 'jarm-fingerprint'
      | 'favicon-mmh3'
      | 'hassh-md5'
      | 'hasshserver-md5'
      | 'regkey'
      | 'regkey|value'
      | 'AS'
      | 'snort'
      | 'bro'
      | 'zeek'
      | 'community-id'
      | 'pattern-in-file'
      | 'pattern-in-traffic'
      | 'pattern-in-memory'
      | 'pattern-filename'
      | 'pgp-public-key'
      | 'pgp-private-key'
      | 'yara'
      | 'stix2-pattern'
      | 'sigma'
      | 'gene'
      | 'kusto-query'
      | 'mime-type'
      | 'identity-card-number'
      | 'cookie'
      | 'vulnerability'
      | 'cpe'
      | 'weakness'
      | 'attachment'
      | 'malware-sample'
      | 'link'
      | 'comment'
      | 'text'
      | 'hex'
      | 'other'
      | 'named pipe'
      | 'mutex'
      | 'process-state'
      | 'target-user'
      | 'target-email'
      | 'target-machine'
      | 'target-org'
      | 'target-location'
      | 'target-external'
      | 'btc'
      | 'dash'
      | 'xmr'
      | 'iban'
      | 'bic'
      | 'bank-account-nr'
      | 'aba-rtn'
      | 'bin'
      | 'cc-number'
      | 'prtn'
      | 'phone-number'
      | 'threat-actor'
      | 'campaign-name'
      | 'campaign-id'
      | 'malware-type'
      | 'uri'
      | 'authentihash'
      | 'vhash'
      | 'ssdeep'
      | 'imphash'
      | 'telfhash'
      | 'pehash'
      | 'impfuzzy'
      | 'sha224'
      | 'sha384'
      | 'sha512'
      | 'sha512/224'
      | 'sha512/256'
      | 'sha3-224'
      | 'sha3-256'
      | 'sha3-384'
      | 'sha3-512'
      | 'tlsh'
      | 'cdhash'
      | 'filename|authentihash'
      | 'filename|vhash'
      | 'filename|ssdeep'
      | 'filename|imphash'
      | 'filename|impfuzzy'
      | 'filename|pehash'
      | 'filename|sha224'
      | 'filename|sha384'
      | 'filename|sha512'
      | 'filename|sha512/224'
      | 'filename|sha512/256'
      | 'filename|sha3-224'
      | 'filename|sha3-256'
      | 'filename|sha3-384'
      | 'filename|sha3-512'
      | 'filename|tlsh'
      | 'windows-scheduled-task'
      | 'windows-service-name'
      | 'windows-service-displayname'
      | 'whois-registrant-email'
      | 'whois-registrant-phone'
      | 'whois-registrant-name'
      | 'whois-registrant-org'
      | 'whois-registrar'
      | 'whois-creation-date'
      | 'x509-fingerprint-sha1'
      | 'x509-fingerprint-md5'
      | 'x509-fingerprint-sha256'
      | 'dns-soa-email'
      | 'size-in-bytes'
      | 'counter'
      | 'datetime'
      | 'port'
      | 'ip-dst|port'
      | 'ip-src|port'
      | 'hostname|port'
      | 'mac-address'
      | 'mac-eui-64'
      | 'email-dst-display-name'
      | 'email-src-display-name'
      | 'email-header'
      | 'email-reply-to'
      | 'email-x-mailer'
      | 'email-mime-boundary'
      | 'email-thread-index'
      | 'email-message-id'
      | 'github-username'
      | 'github-repository'
      | 'github-organisation'
      | 'jabber-id'
      | 'twitter-id'
      | 'dkim'
      | 'dkim-signature'
      | 'first-name'
      | 'middle-name'
      | 'last-name'
      | 'full-name'
      | 'date-of-birth'
      | 'place-of-birth'
      | 'gender'
      | 'passport-number'
      | 'passport-country'
      | 'passport-expiration'
      | 'redress-number'
      | 'nationality'
      | 'visa-number'
      | 'issue-date-of-the-visa'
      | 'primary-residence'
      | 'country-of-residence'
      | 'special-service-request'
      | 'frequent-flyer-number'
      | 'travel-details'
      | 'payment-details'
      | 'place-port-of-original-embarkation'
      | 'place-port-of-clearance'
      | 'place-port-of-onward-foreign-destination'
      | 'passenger-name-record-locator-number'
      | 'mobile-application-id'
      | 'chrome-extension-id'
      | 'cortex'
      | 'boolean'
      | 'anonymised';
    /** @example 127.0.0.1 */
    AttributeValue: string;
    /** @enum {string} */
    AttributeCategory:
      | 'Internal reference'
      | 'Targeting data'
      | 'Antivirus detection'
      | 'Payload delivery'
      | 'Artifacts dropped'
      | 'Payload installation'
      | 'Persistence mechanism'
      | 'Network activity'
      | 'Payload type'
      | 'Attribution'
      | 'External analysis'
      | 'Financial fraud'
      | 'Support Tool'
      | 'Social network'
      | 'Person'
      | 'Other';
    /** @example logged source ip */
    AttributeComment: string;
    AttributeEventUUID: components['schemas']['UUID'];
    /**
     * Format: byte
     * @description base64 representation of the attachment
     */
    AttributeAttachment: string;
    AttributeNoId: {
      event_id?: components['schemas']['EventId'];
      object_id?: components['schemas']['ObjectId'];
      object_relation?: components['schemas']['NullableObjectRelation'];
      category?: components['schemas']['AttributeCategory'];
      type?: components['schemas']['AttributeType'];
      value?: components['schemas']['AttributeValue'];
      to_ids?: components['schemas']['ToIDS'];
      uuid?: components['schemas']['UUID'];
      timestamp?: components['schemas']['NullableTimestamp'];
      distribution?: components['schemas']['DistributionLevelId'];
      sharing_group_id?: components['schemas']['SharingGroupId'];
      comment?: components['schemas']['AttributeComment'];
      deleted?: components['schemas']['SoftDeletedFlag'];
      disable_correlation?: components['schemas']['DisableCorrelationFlag'];
      first_seen?: components['schemas']['NullableMicroTimestamp'];
      last_seen?: components['schemas']['NullableMicroTimestamp'];
    };
    Attribute: {
      id?: components['schemas']['AttributeId'];
    } & components['schemas']['AttributeNoId'];
    ExtendedAttribute: components['schemas']['Attribute'] & {
      data?: components['schemas']['AttributeAttachment'];
      event_uuid?: components['schemas']['UUID'];
      decay_score?: components['schemas']['DecayScoreList'];
    };
    AttributeList: components['schemas']['Attribute'][];
    AttributeRestSearchListItem: components['schemas']['ExtendedAttribute'] & {
      Event?: components['schemas']['Event'];
      Object?: components['schemas']['Object'];
      Tag?: components['schemas']['TagList'];
    };
    AttributeRestSearchList: components['schemas']['AttributeRestSearchListItem'][];
    /**
     * @description Dictionary of attribute types/categories showing the ammount of occurences/percentage.
     * @example [
     *   {
     *     "Antivirus detection": "10"
     *   },
     *   {
     *     "Artifacts dropped": "20"
     *   }
     * ]
     */
    AttributeStatisticsResponse: Record<string, never>;
    /** @description Lists available attribute types, default categories and category-type mappings. */
    DescribeAttributeTypesResponse: {
      /**
       * @example {
       *   "md5": {
       *     "default_category": "Payload delivery",
       *     "to_ids": 1
       *   },
       *   "pdb": {
       *     "default_category": "Artifacts dropped",
       *     "to_ids": 0
       *   }
       * }
       */
      sane_defaults?: Record<string, never>;
      types?: components['schemas']['AttributeType'][];
      categories?: components['schemas']['AttributeCategory'][];
      /**
       * @example {
       *   "Internal reference": [
       *     "text",
       *     "link",
       *     "comment",
       *     "other"
       *   ],
       *   "Antivirus detection": [
       *     "link",
       *     "comment",
       *     "text",
       *     "hex",
       *     "other"
       *   ]
       * }
       */
      category_type_mappings?: Record<string, never>;
    };
    AttributeRestSearchFilter: {
      page?: components['schemas']['PageSearchFilter'];
      limit?: components['schemas']['LimitSearchFilter'];
      value?: components['schemas']['AttributeValue'];
      value1?: components['schemas']['AttributeValue'];
      value2?: components['schemas']['AttributeValue'];
      type?: components['schemas']['AttributeType'];
      category?: components['schemas']['AttributeCategory'];
      org?: components['schemas']['OrganisationId'] | components['schemas']['OrganisationName'];
      tags?: components['schemas']['TagsRestSearchFilter'];
      from?: components['schemas']['DateRestSearchFilter'];
      to?: components['schemas']['DateRestSearchFilter'];
      last?: components['schemas']['LastRestSearchFilter'];
      eventid?: components['schemas']['EventId'];
      withAttachments?: components['schemas']['WithAttachmentsRestSearchFilter'];
      uuid?: components['schemas']['UUID'];
      publish_timestamp?: components['schemas']['Timestamp'];
      published?: components['schemas']['PublishedFlag'];
      timestamp?: components['schemas']['Timestamp'];
      attribute_timestamp?: components['schemas']['Timestamp'];
      enforceWarninglist?: components['schemas']['EnforceWarninglistRestSearchFilter'];
      to_ids?: components['schemas']['ToIDSRestSearchFlag'];
      deleted?: components['schemas']['SoftDeletedFlag'];
      event_timestamp?: components['schemas']['Timestamp'];
      threat_level_id?: components['schemas']['ThreatLevelId'];
      /** @description Quick event description */
      eventinfo?: string;
      sharinggroup?: components['schemas']['SharingGroupIDRestSearchFilter'];
      decayingModel?: components['schemas']['DecayingModelRestSearchFilter'];
      score?: components['schemas']['DecayingModelScoreRestSearchFilter'];
      /** @description Seen within the last x amount of time, where x can be defined in days, hours, minutes (for example 5d or 12h or 30m) */
      first_seen?: string;
      /** @description Seen within the last x amount of time, where x can be defined in days, hours, minutes (for example 5d or 12h or 30m) */
      last_seen?: string;
      includeEventUuid?: components['schemas']['IncludeEventUUIDRestSearchFlag'];
      includeEventTags?: components['schemas']['IncludeEventTagsRestSearchFlag'];
      includeProposals?: components['schemas']['IncludeProposalsRestSearchFlag'];
      requested_attributes?: components['schemas']['RequestedAttributesRestSearchFilter'];
      includeContext?: components['schemas']['IncludeContextRestSearchFlag'];
      headerless?: components['schemas']['HeaderlessRestSearchFlag'];
      includeWarninglistHits?: components['schemas']['IncludeWarninglistHitsRestSearchFlag'];
      attackGalaxy?: components['schemas']['AttackGalaxyRestSearchFilter'];
      object_relation?: components['schemas']['ObjectRelationRestSearchFilter'];
      includeSightings?: components['schemas']['IncludeSightingDbRestSearchFlag'];
      includeCorrelations?: components['schemas']['IncludeCorrelationsRestSearchFlag'];
      modelOverrides?: components['schemas']['ModelOverridesRestSearchFilter'];
      includeDecayScore?: components['schemas']['IncludeDecayScoreRestSearchFlag'];
      includeFullModel?: components['schemas']['IncludeFullModelRestSearchFlag'];
      excludeDecayed?: components['schemas']['ExcludeDecayedRestSearchFlag'];
      returnFormat?: components['schemas']['AttributesRestSearchReturnFormat'];
    };
    DecayingModelParameters: {
      /**
       * Format: float
       * @example 3
       */
      lifetime?: number;
      /**
       * Format: float
       * @example 2.3
       */
      decay_speed?: number;
      /**
       * Format: float
       * @example 30
       */
      threshold?: number;
      /**
       * Format: float
       * @example 80
       */
      default_base_score?: number;
      /**
       * @example {
       *   "estimative-language:confidence-in-analytic-judgment": 0.25,
       *   "estimative-language:likelihood-probability": 0.25,
       *   "phishing:psychological-acceptability": 0.25,
       *   "phishing:state": 0.2
       * }
       */
      base_score_config?: Record<string, never>;
    };
    DecayingModel: {
      /** @example 12345 */
      id?: string;
      /** @example Phishing model */
      name?: string;
    };
    /** @description Present if the `includeFullModel` flag was set to *true* in the rest search request */
    FullDecayingModel: {
      /** @example 12345 */
      id?: string;
      uuid?: components['schemas']['UUID'];
      /** @example Phishing model */
      name?: string;
      /** @example Simple model to rapidly decay phishing website. */
      description?: string;
      parameters?: components['schemas']['DecayingModelParameters'];
      attribute_types?: components['schemas']['AttributeType'][];
      org_id?: components['schemas']['OrganisationId'];
      enabled?: boolean;
      all_orgs?: boolean;
      ref?: string[];
      /** @enum {string} */
      formula?: 'Polynomial';
      /** @example 2 */
      version?: string;
      default?: boolean;
      isEditable?: boolean;
    };
    DecayScore: {
      /**
       * Format: float
       * @example 10.5
       */
      score?: number;
      /**
       * Format: float
       * @example 80
       */
      base_score?: number;
      decayed?: boolean;
      DecayingModel?:
        | components['schemas']['DecayingModel']
        | components['schemas']['FullDecayingModel'];
    };
    DecayScoreList: components['schemas']['DecayScore'][];
    /** @example 12345 */
    EventId: string;
    /** @example logged source ip */
    EventInfo: string;
    /** @example 321 */
    EventAttributeCount: string;
    EventProposalEmailLock: boolean;
    EventOrganisation: {
      id?: components['schemas']['OrganisationId'];
      name?: components['schemas']['OrganisationName'];
      uuid?: components['schemas']['UUID'];
    };
    /** @example 12345 */
    EventTagId: string;
    EventTag: {
      id?: components['schemas']['EventTagId'];
      event_id?: components['schemas']['EventId'];
      tag_id?: components['schemas']['TagId'];
      local?: components['schemas']['IsLocal'];
      Tag?: components['schemas']['Tag'];
    };
    EventTagList: components['schemas']['EventTag'][];
    EventReport: Record<string, never>;
    EventNoId: {
      org_id?: components['schemas']['OrganisationId'];
      distribution?: components['schemas']['DistributionLevelId'];
      info?: components['schemas']['EventInfo'];
      orgc_id?: components['schemas']['OrganisationId'];
      uuid?: components['schemas']['UUID'];
      /** @example 1991-01-15 */
      date?: string;
      published?: components['schemas']['PublishedFlag'];
      analysis?: components['schemas']['AnalysisLevelId'];
      attribute_count?: components['schemas']['EventAttributeCount'];
      timestamp?: components['schemas']['NullableTimestamp'];
      sharing_group_id?: components['schemas']['SharingGroupId'];
      proposal_email_lock?: components['schemas']['EventProposalEmailLock'];
      locked?: components['schemas']['IsLocked'];
      threat_level_id?: components['schemas']['ThreatLevelId'];
      publish_timestamp?: components['schemas']['Timestamp'];
      sighting_timestamp?: components['schemas']['Timestamp'];
      disable_correlation?: components['schemas']['DisableCorrelationFlag'];
      extends_uuid?: components['schemas']['ExtendsUUID'];
      /** Format: email */
      event_creator_email?: string;
    };
    Event: {
      id?: components['schemas']['EventId'];
    } & components['schemas']['EventNoId'];
    ExtendedEvent: components['schemas']['Event'] & {
      Feed?: components['schemas']['Feed'];
      Org?: components['schemas']['EventOrganisation'];
      Orgc?: components['schemas']['EventOrganisation'];
      Attribute?: components['schemas']['AttributeList'];
      ShadowAttribute?: components['schemas']['AttributeList'];
      RelatedEvent?: {
        Event?: components['schemas']['ExtendedEvent'];
      }[];
      Galaxy?: components['schemas']['Galaxy'][];
      Object?: components['schemas']['Object'][];
      EventReport?: components['schemas']['EventReport'][];
      Tag?: components['schemas']['TagList'];
    };
    CreatedEvent: {
      Event?: components['schemas']['ExtendedEvent'] & {
        /** Format: email */
        event_creator_email?: string;
        Galaxy?: components['schemas']['Galaxy'][];
        Object?: components['schemas']['Object'][];
        EventReport?: components['schemas']['EventReport'][];
      };
    };
    UpdatedEvent: {
      Event?: components['schemas']['ExtendedEvent'] & {
        /** Format: email */
        event_creator_email?: string;
        Galaxy?: components['schemas']['Galaxy'][];
        Object?: components['schemas']['Object'][];
        EventReport?: components['schemas']['EventReport'][];
        Tag?: components['schemas']['Tag'][];
      };
    };
    SlimEvent: {
      id: components['schemas']['EventId'];
      timestamp: components['schemas']['Timestamp'];
      sighting_timestamp: components['schemas']['Timestamp'];
      published: components['schemas']['PublishedFlag'];
      uuid: components['schemas']['UUID'];
      orgc_uuid: components['schemas']['UUID'];
    };
    EventList: components['schemas']['Event'][];
    ExtendedEventList: components['schemas']['ExtendedEvent'][];
    SlimEventList: components['schemas']['SlimEvent'][];
    EventRestSearchList: {
      Event?: components['schemas']['ExtendedEvent'] & {
        Event?: components['schemas']['SlimEvent'];
      };
    }[];
    /** @example 12345 */
    ObjectId: string;
    /** @example ail-leak */
    ObjectName: string;
    ObjectMetaCategory: string;
    ObjectDescription: string;
    /** @example 1 */
    ObjectTemplateVersion: string;
    /** @example sensor */
    ObjectRelation: string;
    /** @example sensor */
    NullableObjectRelation: string | null;
    Object: {
      id?: components['schemas']['ObjectId'];
      name?: components['schemas']['ObjectName'];
      'meta-category'?: components['schemas']['ObjectMetaCategory'];
      description?: components['schemas']['ObjectDescription'];
      template_uuid?: components['schemas']['UUID'];
      template_version?: components['schemas']['ObjectTemplateVersion'];
      event_id?: components['schemas']['EventId'];
      uuid?: components['schemas']['UUID'];
      timestamp?: components['schemas']['Timestamp'];
      distribution?: components['schemas']['DistributionLevelId'];
      sharing_group_id?: components['schemas']['SharingGroupId'];
      comment?: string;
      deleted?: boolean;
      first_seen?: components['schemas']['NullableMicroTimestamp'];
      last_seen?: components['schemas']['NullableMicroTimestamp'];
      Attribute?: components['schemas']['Attribute'][];
    };
    ExtendedObject: components['schemas']['Object'] & {
      Event?: {
        id?: components['schemas']['EventId'];
        info?: components['schemas']['EventInfo'];
        org_id?: components['schemas']['OrganisationId'];
        orgc_id?: components['schemas']['OrganisationId'];
      };
    };
    /** @example 12345 */
    ObjectTemplateId: string;
    ObjectRestSearchList: {
      Object?: components['schemas']['Object'];
    };
    ObjectRestSearchFilter: {
      page?: components['schemas']['PageSearchFilter'];
      limit?: components['schemas']['LimitSearchFilter'];
      quickFilter?: components['schemas']['SearchAllRestSearchFilter'];
      searchall?: components['schemas']['SearchAllRestSearchFilter'];
      timestamp?: components['schemas']['Timestamp'];
      object_name?: components['schemas']['ObjectName'];
      object_template_uuid?: components['schemas']['UUID'];
      object_template_version?: components['schemas']['ObjectTemplateVersion'];
      eventid?: components['schemas']['EventId'];
      eventinfo?: components['schemas']['EventInfo'];
      /**
       * @description If true matches both true and false values for `to_ids` and `published`
       * @default false
       */
      ignore?: boolean;
      from?: components['schemas']['DateRestSearchFilter'];
      to?: components['schemas']['DateRestSearchFilter'];
      date?: components['schemas']['DateRestSearchFilter'];
      tags?: components['schemas']['TagsRestSearchFilter'];
      last?: components['schemas']['LastRestSearchFilter'];
      event_timestamp?: components['schemas']['Timestamp'];
      publish_timestamp?: components['schemas']['Timestamp'];
      org?: components['schemas']['OrganisationId'] | components['schemas']['OrganisationName'];
      uuid?: components['schemas']['UUID'];
      value?: components['schemas']['AttributeValue'];
      type?: components['schemas']['AttributeType'];
      category?: components['schemas']['AttributeCategory'];
      object_relation?: components['schemas']['ObjectRelationRestSearchFilter'];
      attribute_timestamp?: components['schemas']['Timestamp'];
      first_seen?: components['schemas']['NullableMicroTimestamp'];
      last_seen?: components['schemas']['NullableMicroTimestamp'];
      comment?: components['schemas']['AttributeComment'];
      to_ids?: components['schemas']['ToIDSRestSearchFlag'];
      published?: components['schemas']['PublishedFlag'];
      deleted?: components['schemas']['SoftDeletedFlag'];
      withAttachments?: components['schemas']['WithAttachmentsRestSearchFilter'];
      enforceWarninglist?: components['schemas']['EnforceWarninglistRestSearchFilter'];
      includeAllTags?: components['schemas']['IncludeAllTagsRestSearchFilter'];
      includeEventUuid?: components['schemas']['IncludeEventUUIDRestSearchFlag'];
      include_event_uuid?: components['schemas']['IncludeEventUUIDRestSearchFlag'];
      includeEventTags?: components['schemas']['IncludeEventTagsRestSearchFlag'];
      includeProposals?: components['schemas']['IncludeProposalsRestSearchFlag'];
      includeWarninglistHits?: components['schemas']['IncludeWarninglistHitsRestSearchFlag'];
      includeContext?: components['schemas']['IncludeContextRestSearchFlag'];
      includeSightings?: components['schemas']['IncludeContextRestSearchFlag'];
      includeSightingdb?: components['schemas']['IncludeSightingDbRestSearchFlag'];
      includeCorrelations?: components['schemas']['IncludeCorrelationsRestSearchFlag'];
      includeDecayScore?: components['schemas']['IncludeDecayScoreRestSearchFlag'];
      includeFullModel?: components['schemas']['IncludeFullModelRestSearchFlag'];
      allow_proposal_blocking?: components['schemas']['AllowProposalBlockingRestSearchFlag'];
      metadata?: components['schemas']['MetadataRestSearchFilter'];
      attackGalaxy?: components['schemas']['AttackGalaxyRestSearchFilter'];
      excludeDecayed?: components['schemas']['ExcludeDecayedRestSearchFlag'];
      decayingModel?: components['schemas']['DecayingModelRestSearchFilter'];
      modelOverrides?: components['schemas']['ModelOverridesRestSearchFilter'];
      score?: components['schemas']['DecayingModelScoreRestSearchFilter'];
      returnFormat?: components['schemas']['ObjectsRestSearchReturnFormat'];
    };
    /** @example 12345 */
    SightingId: string;
    Sighting: {
      id?: components['schemas']['SightingId'];
      attribute_id?: components['schemas']['AttributeId'];
      event_id?: components['schemas']['EventId'];
      org_id?: components['schemas']['OrganisationId'];
      date_sighting?: components['schemas']['Timestamp'];
      uuid?: components['schemas']['UUID'];
      source?: string;
      type?: string;
      attribute_uuid?: components['schemas']['UUID'];
      Organisation?: {
        id?: components['schemas']['OrganisationId'];
        uuid?: components['schemas']['UUID'];
        name?: components['schemas']['OrganisationName'];
      };
    };
    /** @example 12345 */
    GalaxyId: string;
    /** @example Ransomware */
    GalaxyName: string;
    /** @example ransomware */
    GalaxyType: string;
    /** @example Ransomware galaxy based on ... */
    GalaxyDescription: string;
    /** @example 1 */
    GalaxyVersion: string;
    /** @example misp */
    GalaxyNamespace: string;
    Galaxy: {
      id?: components['schemas']['GalaxyId'];
      uuid?: components['schemas']['UUID'];
      name?: components['schemas']['GalaxyName'];
      type?: components['schemas']['GalaxyType'];
      description?: components['schemas']['GalaxyDescription'];
      version?: components['schemas']['GalaxyVersion'];
      icon?: components['schemas']['Icon'];
      namespace?: components['schemas']['GalaxyNamespace'];
      /**
       * @example {
       *   "fraud-tactics": [
       *     "Initiation",
       *     "Target Compromise",
       *     "Perform Fraud",
       *     "Obtain Fraudulent Assets",
       *     "Assets Transfer",
       *     "Monetisation"
       *   ]
       * }
       */
      kill_chain_order?: Record<string, unknown> | null;
    };
    /** @example 12345 */
    GalaxyClusterId: string;
    /** @example Brute Force - T1110 */
    GalaxyClusterValue: string;
    /** @example mitre-enterprise-attack-attack-pattern */
    GalaxyClusterType: string;
    /** @example Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained... */
    GalaxyClusterDescription: string;
    /** @example https://github.com/mitre/cti */
    GalaxyClusterSource: string;
    GalaxyClusterAuthors: string[];
    /** @example 1 */
    GalaxyClusterVersion: string | null;
    /** @example 12345 */
    GalaxyElementId: string;
    /** @example categories */
    GalaxyElementKey: string;
    /** @example Military */
    GalaxyElementValue: string;
    GalaxyElement: {
      id?: components['schemas']['GalaxyElementId'];
      galaxy_cluster_id?: components['schemas']['GalaxyClusterId'];
      key?: components['schemas']['GalaxyElementKey'];
      value?: components['schemas']['GalaxyElementValue'];
    };
    GalaxyElementList: components['schemas']['GalaxyElement'][];
    GalaxyClusterRelationList: components['schemas']['GalaxyElement'][];
    GalaxyClusterNoId: {
      uuid?: components['schemas']['UUID'];
      collection_uuid?: components['schemas']['UUID'];
      type?: components['schemas']['GalaxyClusterType'];
      value?: components['schemas']['GalaxyClusterValue'];
      tag_name?: components['schemas']['TagName'];
      description?: components['schemas']['GalaxyClusterDescription'];
      galaxy_id?: components['schemas']['GalaxyId'];
      source?: components['schemas']['GalaxyClusterSource'];
      authors?: components['schemas']['GalaxyClusterAuthors'];
      version?: components['schemas']['GalaxyClusterVersion'];
      distribution?: components['schemas']['DistributionLevelId'];
      sharing_group_id?: components['schemas']['SharingGroupId'];
      org_id?: components['schemas']['OrganisationId'];
      orgc_id?: components['schemas']['OrganisationId'];
      default?: components['schemas']['IsDefault'];
      locked?: components['schemas']['IsLocked'];
      extends_uuid?: components['schemas']['ExtendsUUID'];
      extends_version?: components['schemas']['GalaxyClusterVersion'];
      published?: components['schemas']['PublishedFlag'];
      deleted?: components['schemas']['SoftDeletedFlag'];
      GalaxyElement?: components['schemas']['GalaxyElement'][];
    };
    /** @description MISP galaxy is a simple method to express a large object called cluster that can be attached to MISP events or attributes. */
    GalaxyCluster: {
      id?: components['schemas']['GalaxyClusterId'];
    } & components['schemas']['GalaxyClusterNoId'];
    /** @description A galaxy cluster with all it's details. */
    ExtendedGalaxyCluster: components['schemas']['GalaxyCluster'] & {
      Galaxy?: components['schemas']['Galaxy'];
      GalaxyClusterRelation?: components['schemas']['GalaxyClusterRelationList'];
      Org?: components['schemas']['Organisation'];
      Orgc?: components['schemas']['Organisation'];
      /** Format: int32 */
      tag_count?: number;
      tag_id?: components['schemas']['TagId'];
    };
    /** @description A galaxy with it's galaxy cluster details. */
    ExtendedGalaxy: {
      Galaxy?: components['schemas']['Galaxy'];
      GalaxyCluster?: components['schemas']['GalaxyCluster'][];
    };
    /** @description Galaxy and clusters representation in misp-galaxy format. */
    GalaxyMispFormat: {
      name?: components['schemas']['GalaxyName'];
      type?: components['schemas']['GalaxyType'];
      authors?: components['schemas']['GalaxyClusterAuthors'];
      version?: boolean | components['schemas']['GalaxyClusterVersion'];
      uuid?: components['schemas']['UUID'];
      source?: components['schemas']['GalaxyClusterSource'];
      values?: {
        description?: components['schemas']['GalaxyClusterDescription'];
        uuid?: components['schemas']['UUID'];
        value?: components['schemas']['GalaxyClusterValue'];
        extends_uuid?: components['schemas']['ExtendsUUID'];
        extends_Version?: components['schemas']['GalaxyClusterVersion'];
        /**
         * @description Each Galaxy element associated to this cluster represents a key-value property.
         * @example [
         *   {
         *     "categories": "botnet"
         *   },
         *   {
         *     "refs": "http://example.com"
         *   },
         *   {
         *     "aliases": [
         *       "malware",
         *       "win32",
         *       "windows"
         *     ]
         *   },
         *   {
         *     "topics": [
         *       "Windows",
         *       "Malware"
         *     ]
         *   }
         * ]
         */
        meta?: Record<string, never>;
      }[];
    };
    /**
     * @description Text search term to find a matching galaxy name, namespace, description, kill_chain_order or uuid.
     * @example botnet
     */
    GalaxyValueSearchFilter: string;
    ImportGalaxyClusterItem: {
      GalaxyCluster?: components['schemas']['GalaxyClusterNoId'];
      Galaxy?: {
        uuid?: components['schemas']['UUID'];
      };
    };
    /** @example 12345 */
    TagId: string;
    /** @example tlp:white */
    TagName: string;
    /** @example #ffffff */
    TagColour: string;
    /** @example 12345 */
    TagNumericalValue: string | null;
    /** @default false */
    HideTagFlag: boolean;
    TagNoId: {
      name?: components['schemas']['TagName'];
      colour?: components['schemas']['TagColour'];
      exportable?: components['schemas']['IsExportable'];
      org_id?: components['schemas']['OrganisationId'];
      user_id?: components['schemas']['UserId'];
      hide_tag?: components['schemas']['HideTagFlag'];
      numerical_value?: components['schemas']['TagNumericalValue'];
      is_galaxy?: components['schemas']['IsGalaxy'];
      is_custom_galaxy?: components['schemas']['IsCustomGalaxy'];
      inherited?: components['schemas']['IsInherited'];
    };
    /** @description A tag is a simple method to classify an event with a simple string. The tag name can be freely chosen. The tag name can be also chosen from a fixed machine-tag vocabulary called MISP taxonomies */
    Tag: {
      id?: components['schemas']['TagId'];
    } & components['schemas']['TagNoId'];
    TagList: components['schemas']['Tag'][];
    /** @example 12345 */
    TagCollectionId: string;
    ExtendedTag: {
      Tag?: components['schemas']['Tag'];
      Taxonomy?: components['schemas']['Taxonomy'];
      TaxonomyPredicate?: components['schemas']['TaxonomyPredicate'];
    };
    /** @example 12345 */
    TaxonomyId: string;
    /** @example 12345 */
    TaxonomyPredicateId: string;
    /** @example tlp */
    TaxonomyNamespace: string;
    /** @example Disclosure is not limited.  Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. */
    TaxonomyDescription: string;
    /** @example 5 */
    TaxonomyVersion: string;
    Taxonomy: {
      id?: components['schemas']['TaxonomyId'];
      namespace?: components['schemas']['TaxonomyNamespace'];
      description?: components['schemas']['TaxonomyDescription'];
      version?: components['schemas']['TaxonomyVersion'];
      enabled?: boolean;
      exclusive?: boolean;
      required?: boolean;
    };
    /** @example white */
    TaxonomyPredicateValue: string;
    /** @example (TLP:WHITE) Information can be shared publicly in accordance with the law. */
    TaxonomyPredicateExpanded: string;
    /** @example Disclosure is not limited.  Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. */
    TaxonomyPredicateDescription: string;
    TaxonomyPredicate: {
      id?: components['schemas']['TaxonomyPredicateId'];
      taxonomy_id?: components['schemas']['TaxonomyId'];
      value?: components['schemas']['TaxonomyPredicateValue'];
      expanded?: components['schemas']['TaxonomyPredicateExpanded'];
      /** @example #ffffff */
      colour?: string;
      description?: components['schemas']['TaxonomyPredicateDescription'];
      exclusive?: boolean;
      numerical_value?: number | null;
    };
    TaxonomyPredicateExport: {
      value?: components['schemas']['TaxonomyPredicateValue'];
      expanded?: components['schemas']['TaxonomyPredicateExpanded'];
    };
    TaxonomyEntryExport: {
      /** @example spam */
      value?: string;
      /** @example spam */
      expanded?: string;
      /** @example Spam or ‘unsolicited bulk e-mail’, meaning that the recipient has not granted verifiable permission for the message to be sent and that the message is sent as part of a larger collection of messages, all having identical content. */
      description?: string;
    };
    TaxonomyValueExport: {
      predicate?: components['schemas']['TaxonomyPredicateValue'];
      entry?: components['schemas']['TaxonomyEntryExport'][];
    };
    TaxonomyEntry: {
      tag?: components['schemas']['TagName'];
      expanded?: string;
      description?: string;
      exclusive_predicate?: boolean;
      existing_tag?: boolean;
    };
    ExtendedTaxonomyEntry: components['schemas']['UserNoId'] & {
      events?: number;
      attributes?: number;
    };
    /** @example 12345 */
    UserId: string;
    DashboardUserSetting: {
      /** @example MispStatusWidget */
      widget?: string;
      position?: {
        /** @example 0 */
        x?: string;
        /** @example 0 */
        y?: string;
        /** @example 2 */
        width?: string;
        /** @example 2 */
        height?: string;
      };
    };
    /**
     * @example [
     *   {
     *     "AND": [
     *       {
     *         "NOT": [
     *           {
     *             "EventTag.name": [
     *               "%osint%"
     *             ]
     *           }
     *         ]
     *       },
     *       {
     *         "OR": [
     *           {
     *             "Tag.name": [
     *               "tlp:green",
     *               "tlp:amber",
     *               "tlp:red",
     *               "%privint%"
     *             ]
     *           }
     *         ]
     *       }
     *     ]
     *   }
     * ]
     */
    PublishAlertFilterUserSetting: Record<string, never>;
    DashboardAccessUserSetting: boolean;
    HomepageUserSetting: {
      /** @example /events/index */
      path?: string;
    };
    /**
     * @example [
     *   {
     *     "AND": [
     *       {
     *         "NOT": [
     *           {
     *             "EventTag.name": [
     *               "%osint%"
     *             ]
     *           }
     *         ]
     *       },
     *       {
     *         "OR": [
     *           {
     *             "Tag.name": [
     *               "tlp:green",
     *               "tlp:amber",
     *               "tlp:red",
     *               "%privint%"
     *             ]
     *           }
     *         ]
     *       }
     *     ]
     *   }
     * ]
     */
    DefaultRestSearchParametersUserSetting: Record<string, never>;
    /**
     * @example [
     *   {
     *     "false-positive:risk='medium'": 99
     *   }
     * ]
     */
    TagNumbericalValueOverrideUserSetting: Record<string, never>;
    EventIndexHideColumnsUserSetting: string[];
    /** @example 12345 */
    UserSettingId: string;
    /** @enum {string} */
    UserSettingName:
      | 'publish_alert_filter'
      | 'dashboard_access'
      | 'dashboard'
      | 'homepage'
      | 'default_restsearch_parameters'
      | 'tag_numerical_value_override'
      | 'event_index_hide_columns';
    UserSetting: {
      id?: components['schemas']['UserSettingId'];
      setting?: components['schemas']['UserSettingName'];
      value?:
        | components['schemas']['DashboardUserSetting']
        | components['schemas']['PublishAlertFilterUserSetting']
        | components['schemas']['DashboardAccessUserSetting']
        | components['schemas']['HomepageUserSetting']
        | components['schemas']['DefaultRestSearchParametersUserSetting']
        | components['schemas']['TagNumbericalValueOverrideUserSetting']
        | components['schemas']['EventIndexHideColumnsUserSetting'];
      user_id?: components['schemas']['UserId'];
      timestamp?: components['schemas']['Timestamp'];
    };
    ViewUserSettings: {
      publish_alert_filter?: components['schemas']['PublishAlertFilterUserSetting'];
      dashboard_access?: components['schemas']['DashboardAccessUserSetting'];
      dashboard?: components['schemas']['DashboardUserSetting'][];
      homepage?: components['schemas']['HomepageUserSetting'];
      default_restsearch_parameters?: components['schemas']['DefaultRestSearchParametersUserSetting'];
      tag_numerical_value_override?: components['schemas']['TagNumbericalValueOverrideUserSetting'];
      event_index_hide_columns?: components['schemas']['EventIndexHideColumnsUserSetting'];
    };
    UserNoId: {
      org_id?: components['schemas']['OrganisationId'];
      server_id?: components['schemas']['ServerId'];
      /** Format: email */
      email?: string;
      autoalert?: boolean;
      /**
       * @description API auth key used for the API, only set if MISP setting `Security.advanced_authkeys` is set to `false`.
       * @example 894c8d095180c7ea28789092e96ca6424199aa4f
       */
      authkey?: string | null;
      invited_by?: components['schemas']['UserId'];
      gpgkey?: string | null;
      certif_public?: string | null;
      /** @example 4000000 */
      nids_sid?: string;
      termsaccepted?: boolean;
      newsread?: components['schemas']['Timestamp'];
      role_id?: components['schemas']['RoleId'];
      /**
       * @description Password change required.
       * @enum {string}
       */
      change_pw?: '0' | '1';
      contactalert?: boolean;
      disabled?: boolean;
      /** Format: date-time */
      expiration?: string | null;
      current_login?: components['schemas']['Timestamp'];
      last_login?: components['schemas']['Timestamp'];
      force_logout?: boolean;
      date_created?: components['schemas']['Timestamp'];
      date_modified?: components['schemas']['Timestamp'];
    };
    User: {
      id?: components['schemas']['UserId'];
    } & components['schemas']['UserNoId'];
    ExtendedUser: components['schemas']['User'] & {
      User?: components['schemas']['User'];
      Role?: components['schemas']['Role'];
      UserSetting?: components['schemas']['ViewUserSettings'];
    };
    UserListItem: {
      User?: components['schemas']['User'];
      Role?: components['schemas']['Role'];
      Organisation?: {
        id?: components['schemas']['OrganisationId'];
        name?: components['schemas']['OrganisationName'];
      };
    };
    UserList: components['schemas']['UserListItem'][];
    /** @example 12345 */
    OrganisationId: string;
    /** @example ORGNAME */
    OrganisationName: string;
    /** @example ADMIN */
    OrganisationType: string | null;
    OrganisationNoId: {
      name?: components['schemas']['OrganisationName'];
      /** @example 2021-06-14 14:29:19 */
      date_created?: string;
      /** @example 2021-06-14 14:29:19 */
      date_modified?: string;
      description?: string;
      type?: components['schemas']['OrganisationType'];
      nationality?: string;
      sector?: string;
      created_by?: components['schemas']['UserId'];
      uuid?: string;
      contacts?: string | null;
      local?: boolean;
      restricted_to_domain?: string[];
      landingpage?: string | null;
      /** @example 3 */
      user_count?: string | null;
      created_by_email?: string | null;
    };
    Organisation: {
      id?: components['schemas']['OrganisationId'];
    } & components['schemas']['OrganisationNoId'];
    OrganisationListItem: {
      Organisation?: components['schemas']['Organisation'];
    };
    OrganisationList: components['schemas']['OrganisationListItem'][];
    /** @example 12345 */
    ServerId: string;
    /** @example Phising Server */
    ServerName: string;
    ServerNoId: {
      name?: components['schemas']['ServerName'];
      /** @example https://misppriv.circl.lu */
      url?: string;
      authkey?: components['schemas']['AuthKeyRaw'];
      org_id?: components['schemas']['OrganisationId'];
      push?: boolean;
      pull?: boolean;
      push_sightings?: boolean;
      push_galaxy_clusters?: boolean;
      pull_galaxy_clusters?: boolean;
      /** @example 12345 */
      lastpulledid?: string | null;
      /** @example 12345 */
      lastpushedid?: string | null;
      organization?: string | null;
      remote_org_id?: components['schemas']['OrganisationId'];
      publish_without_email?: boolean;
      unpublish_event?: boolean;
      self_signed?: boolean;
      /**
       * @description Stringified JSON rules for pulling events from this server.
       * @example {"tags":{"OR":[],"NOT":[]},"orgs":{"OR":[],"NOT":[]},"url_params":""}
       */
      pull_rules?: string;
      /**
       * @description Stringified JSON rules for pushing events from this server.
       * @example {"tags":{"OR":[],"NOT":[]},"orgs":{"OR":[],"NOT":[]}}
       */
      push_rules?: string;
      /**
       * Format: byte
       * @description Base64 encoded certificate
       */
      cert_file?: string | null;
      /**
       * Format: byte
       * @description Base64 encoded client certificate
       */
      client_cert_file?: string | null;
      internal?: boolean;
      skip_proxy?: boolean;
      caching_enabled?: boolean;
      /** @example 1 */
      priority?: string | null;
      cache_timestamp?: boolean;
    };
    Server: {
      id?: components['schemas']['ServerId'];
    } & components['schemas']['ServerNoId'];
    ServerListItem: {
      Server?: components['schemas']['Server'];
      Organisation?: components['schemas']['Organisation'];
      RemoteOrg?: components['schemas']['Organisation'];
      User?: components['schemas']['User'][];
    };
    ServerList: components['schemas']['ServerListItem'][];
    PhpServerSetting: {
      /** @example The maximum duration that a script can run (does not affect the background workers). A too low number will break long running scripts like comprehensive API exports */
      explanation?: string;
      recommended?: number | string;
      /** @example seconds */
      unit?: string;
      value?: number | string;
    };
    ServerPackageVersion: {
      /** @example 1.2.0.11 */
      version?: string;
      /** @example >1.2.0.9 */
      expected?: string;
      /**
       * Format: int32
       * @example 1
       */
      status?: number;
    };
    DatabaseTableDiagnostics: {
      /** @example 207.63MB */
      used?: string;
      /** @example 5MB */
      reclaimable?: string;
      /** @example attributes */
      table?: string;
    };
    MispSetting: {
      /** @example 0 */
      level?: number;
      value?: string | boolean | number;
      /** @example The currently set baseurl does not match the URL through which you have accessed the page. Disregard this if you are accessing the page via an alternate URL (for example via IP address). */
      errorMessage?: string | null;
      test?: (string | boolean) | null;
      /**
       * @example string
       * @enum {string}
       */
      type?: 'string' | 'boolean' | 'numeric';
      null?: boolean | null;
      /** @example Enrichment */
      subGroup?: string | null;
      /** @example 1 */
      cli_only?: number | null;
      redacted?: boolean | null;
      optionsSource?: Record<string, unknown> | null;
      /** @example cleanCacheFiles */
      afterHook?: string | null;
      /** @example 1 */
      error?: number | null;
      /** @example MISP */
      tab?: string;
      /** @example MISP.baseurl */
      setting?: string;
      options?: (Record<string, never> | string | string[] | Record<string, never>[]) | null;
    };
    Worker: {
      /** @example 1233 */
      pid?: number;
      /** @example www-data */
      user?: string;
      alive?: boolean;
      correct_user?: boolean;
      ok?: boolean;
    };
    WorkersStatus: {
      ok?: boolean;
      workers?: components['schemas']['Worker'][];
      /** @example 0 */
      jobCount?: number | null;
    };
    UpdateServerResultItem: {
      /** @example cd $(git rev-parse --show-toplevel) && git checkout app/composer.json 2>&1 */
      input?: string;
      output?: string[];
      /** @example 0 */
      status?: number;
    };
    /** @example 3 */
    FeedId: string;
    /** @example CIRCL OSINT Feed */
    FeedName: string;
    /** @enum {string} */
    FeedSourceFormat: '1' | 'csv' | 'freetext' | 'misp';
    /**
     * @description Specify whether the source (url field) is a directory (local) or an genuine url (network).
     * @enum {string}
     */
    FeedInputSource: 'local' | 'network';
    /**
     * @description Headers to be passed with the requests. All separated by
     *
     * @example X-Custom-Header-A: Foo
     * X-Custom-Header-B: Bar
     */
    FeedHeaders: string | null;
    /** @example {"csv":{"value":"","delimiter":""},"common":{"excluderegex":""},"disable_correlation":"1"} */
    FeedSettings: string | null;
    /**
     * @description Stringified JSON filter rules.
     * @example {"tags":{"OR":[],"NOT":[]},"orgs":{"OR":[],"NOT":[]},"url_params":""}
     */
    FeedRules: string | null;
    /** @example https://www.circl.lu/doc/misp/feed-osint */
    FeedUrl: string;
    /** @description target_event option might be considered */
    FeedFixedEvent: boolean;
    /** @description Merge attributes (only add new attribute, remove revoked attributes) */
    FeedDeltaMergeFlag: boolean;
    /** @example CIRCL */
    FeedProvider: string;
    /** @description The IDS flags will be set to Off for this feed */
    FeedOverrideIDSFlag: boolean;
    /** @description The IDS flags will be set to Off for this feed */
    FeedDeleteLocalFileFlag: boolean;
    /** @description The lookup will not be visible in the feed correlation */
    FeedLookupVisibleFlag: boolean;
    /** @description The feed is cached */
    FeedCachingEnabledFlag: boolean;
    /** @description The IDS flags will be set to On for this feed */
    FeedForceToIDSFlag: boolean;
    FeedEnabledFlag: boolean;
    FeedCacheTimestamp: (components['schemas']['Timestamp'] | boolean) | null;
    FeedNoId: {
      name?: components['schemas']['FeedName'];
      provider?: components['schemas']['FeedProvider'];
      url?: components['schemas']['FeedUrl'];
      rules?: components['schemas']['FeedRules'];
      enabled?: components['schemas']['FeedEnabledFlag'];
      distribution?: components['schemas']['DistributionLevelId'];
      sharing_group_id?: components['schemas']['SharingGroupId'];
      tag_id?: components['schemas']['TagId'];
      default?: components['schemas']['IsDefault'];
      source_format?: components['schemas']['FeedSourceFormat'];
      fixed_event?: components['schemas']['FeedFixedEvent'];
      delta_merge?: components['schemas']['FeedDeltaMergeFlag'];
      event_id?: components['schemas']['EventId'];
      publish?: components['schemas']['PublishedFlag'];
      override_ids?: components['schemas']['FeedOverrideIDSFlag'];
      settings?: components['schemas']['FeedSettings'];
      input_source?: components['schemas']['FeedInputSource'];
      delete_local_file?: components['schemas']['FeedDeleteLocalFileFlag'];
      lookup_visible?: components['schemas']['FeedLookupVisibleFlag'];
      headers?: components['schemas']['FeedHeaders'];
      caching_enabled?: components['schemas']['FeedCachingEnabledFlag'];
      force_to_ids?: components['schemas']['FeedForceToIDSFlag'];
      orgc_id?: components['schemas']['OrganisationId'];
      cache_timestamp?: components['schemas']['FeedCacheTimestamp'];
    };
    Feed: {
      id?: components['schemas']['FeedId'];
    } & components['schemas']['FeedNoId'];
    /** @example 3 */
    WarninglistId: string;
    WarninglistEntry: {
      /** @example 1234 */
      id?: string;
      /** @example 10.128.0.0/24 */
      value?: string;
      warninglist_id?: components['schemas']['WarninglistId'];
    };
    Warninglist: {
      id?: components['schemas']['WarninglistId'];
      /** @example List of known domains to know external IP */
      name?: string;
      /**
       * @example cidr
       * @enum {string}
       */
      type?: 'cidr' | 'hostname' | 'substring' | 'string' | 'regex';
      description?: string;
      /** @example 10 */
      version?: string;
      enabled?: boolean;
      /** @example 1234 */
      warninglist_entry_count?: string;
      /**
       * @description List of comma separated warninglist types.
       * @example domain, hostname, domain|ip, uri, url
       */
      valid_attributes?: string;
      WarninglistEntry?: components['schemas']['WarninglistEntry'][];
    };
    WarninglistsIdFilter:
      | components['schemas']['WarninglistId']
      | components['schemas']['WarninglistId'][];
    WarninglistsNameFilter: string | string[];
    /** @example 3 */
    NoticelistId: string;
    NoticelistEntry: {
      /** @example 1234 */
      id?: string;
      noticelist_id?: components['schemas']['NoticelistId'];
      data?: {
        scope?: string[];
        field?: string[];
        value?: string[];
        tags?: components['schemas']['TagName'][];
        message?: {
          /** @example This attribute is likely to contain personal data and the data subject is likely to be directly identifiable. */
          en?: string;
        };
      };
    };
    Noticelist: {
      id?: components['schemas']['NoticelistId'];
      /** @example List of known domains to know external IP */
      name?: string;
      /**
       * @example cidr
       * @enum {string}
       */
      type?: 'cidr' | 'hostname' | 'substring' | 'string' | 'regex';
      description?: string;
      /** @example 10 */
      version?: string;
      enabled?: boolean;
      /** @example 1234 */
      warninglist_entry_count?: string;
      /**
       * @description List of comma separated warninglist types.
       * @example domain, hostname, domain|ip, uri, url
       */
      valid_attributes?: string;
      NoticelistEntry?: components['schemas']['NoticelistEntry'][];
    };
    /** @example 3 */
    RoleId: string;
    /** @example ORGNAME */
    RoleName: string;
    Role: {
      id?: components['schemas']['RoleId'];
      name?: components['schemas']['RoleName'];
      perm_add?: boolean;
      perm_modify?: boolean;
      perm_modify_org?: boolean;
      perm_publish?: boolean;
      perm_delegate?: boolean;
      perm_sync?: boolean;
      perm_admin?: boolean;
      perm_audit?: boolean;
      perm_auth?: boolean;
      perm_site_admin?: boolean;
      perm_regexp_access?: boolean;
      perm_tagger?: boolean;
      perm_template?: boolean;
      perm_sharing_group?: boolean;
      perm_tag_editor?: boolean;
      perm_sighting?: boolean;
      perm_object_template?: boolean;
      perm_publish_zmq?: boolean;
      perm_publish_kafka?: boolean;
      perm_decaying?: boolean;
      perm_galaxy_editor?: boolean;
      default_role?: boolean;
      memory_limit?: string | null;
      max_execution_time?: string | null;
      restricted_to_site_admin?: boolean;
      enforce_rate_limit?: boolean;
      rate_limit_count?: string;
      /** @example 3 */
      permission?: string;
      /** @example publish */
      permission_description?: string;
    };
    /** @example 1 */
    SharingGroupId: string | null;
    /** @example 1 */
    SharingGroupServerId: string | null;
    /** @example 1 */
    SharingGroupOrganisationId: string | null;
    /** @example Banking Sharing Group */
    SharingGroupName: string;
    /** @example Banking Institutions of X Sharing Group */
    SharingGroupDescription: string;
    SharingGroupReleasability: string;
    SlimSharingGroupNoId: {
      uuid?: components['schemas']['UUID'];
      name?: components['schemas']['SharingGroupName'];
      description?: components['schemas']['SharingGroupDescription'];
      releasability?: components['schemas']['SharingGroupReleasability'];
      local?: boolean;
      active?: boolean;
      /** @example 6 */
      org_count?: string;
    };
    SlimSharingGroup: {
      id?: components['schemas']['SharingGroupId'];
    } & components['schemas']['SlimSharingGroupNoId'];
    SharingGroupNoId: components['schemas']['SlimSharingGroupNoId'] & {
      organisation_uuid?: components['schemas']['UUID'];
      org_id?: components['schemas']['OrganisationId'];
      sync_user_id?: components['schemas']['UserId'];
      /** Format: datetime */
      created?: string;
      /** Format: datetime */
      modified?: string;
      roaming?: boolean;
    };
    SharingGroup: {
      id?: components['schemas']['SharingGroupId'];
    } & components['schemas']['SharingGroupNoId'];
    SharingGroupOrganisation: {
      id?: components['schemas']['SharingGroupOrganisationId'];
      sharing_group_id?: components['schemas']['SharingGroupId'];
      org_id?: components['schemas']['OrganisationId'];
      extend?: boolean;
      Organisation?: {
        id?: components['schemas']['OrganisationId'];
        name?: components['schemas']['OrganisationName'];
        uuid?: components['schemas']['UUID'];
      };
    };
    SharingGroupServer: {
      all_orgs?: boolean;
      server_id?: components['schemas']['ServerId'];
      sharing_group_id?: components['schemas']['SharingGroupId'];
      Server?: {
        id?: components['schemas']['ServerId'];
        name?: components['schemas']['ServerName'];
      };
    };
    SharingGroupListItem: {
      SharingGroup?: components['schemas']['SlimSharingGroup'];
      Organisation?: {
        id?: components['schemas']['OrganisationId'];
        name?: components['schemas']['OrganisationName'];
        uuid?: components['schemas']['UUID'];
      };
      SharingGroupOrg?: components['schemas']['SharingGroupOrganisation'][];
      SharingGroupServer?: components['schemas']['SharingGroupServer'][];
      editable?: boolean;
      deletable?: boolean;
    };
    /** @enum {string} */
    LogActionType:
      | 'accept'
      | 'accept_delegation'
      | 'acceptRegistrations'
      | 'add'
      | 'admin_email'
      | 'attachTags'
      | 'auth'
      | 'auth_fail'
      | 'blocklisted'
      | 'captureRelations'
      | 'change_pw'
      | 'delete'
      | 'disable'
      | 'discard'
      | 'discardRegistrations'
      | 'edit'
      | 'email'
      | 'enable'
      | 'enrichment'
      | 'error'
      | 'export'
      | 'fetchEvent'
      | 'file_upload'
      | 'galaxy'
      | 'include_formula'
      | 'login'
      | 'login_fail'
      | 'logout'
      | 'merge'
      | 'pruneUpdateLogs'
      | 'publish'
      | 'publish_sightings'
      | 'publish alert'
      | 'pull'
      | 'purge_events'
      | 'push'
      | 'registration'
      | 'registration_error'
      | 'remove_dead_workers'
      | 'request'
      | 'request_delegation'
      | 'reset_auth_key'
      | 'send_mail'
      | 'security'
      | 'serverSettingsEdit'
      | 'tag'
      | 'undelete'
      | 'update'
      | 'update_database'
      | 'update_db_worker'
      | 'upgrade_24'
      | 'upload_sample'
      | 'version_warning'
      | 'warning'
      | 'wipe_default';
    /** @example 12345 */
    LogId: string;
    /** @example Attribute (448272) from Event (1): Other/text foo */
    LogTitle: string;
    /** @example name () => (ORGNAME) */
    LogChange: string;
    /** @example Organisation "ORGNAME" (1) added by User "SYSTEM" (0). */
    LogDescription: string;
    Log: {
      id?: components['schemas']['LogId'];
      title?: components['schemas']['LogTitle'];
      /** Format: datetime */
      created?: string;
      model?: components['schemas']['ModelName'];
      model_id?: components['schemas']['ModelId'];
      action?: components['schemas']['LogActionType'];
      user_id?: components['schemas']['UserId'];
      change?: components['schemas']['LogChange'];
      /** Format: email */
      email?: string;
      org?: components['schemas']['OrganisationName'];
      description?: components['schemas']['LogDescription'];
      /** @example 10.0.0.10 */
      ip?: string;
    };
    /** @example 894c8d095180c7ea28789092e96ca6424199aa4f */
    AuthKeyRaw: string;
    /**
     * @description Who will be able to see this event once it becomes published and eventually when it becomes pulled:
     *   * `0` - Your organization only
     *   * `1` - This community only
     *   * `2` - Connected communities
     *   * `3` - All communities
     *   * `4` - Sharing group
     *   * `5` - Inherit Event
     *
     * @enum {string}
     */
    DistributionLevelId: '0' | '1' | '2' | '3' | '4' | '5';
    /**
     * @description Represents the threat level.
     *   * `1` - High
     *   * `2` - Medium
     *   * `3` - Low
     *   * `4` - Undefined
     *
     * @enum {string}
     */
    ThreatLevelId: '1' | '2' | '3' | '4';
    /**
     * @description Represents the analysis maturity level.
     *   * `0` - Initial
     *   * `1` - Ongoing
     *   * `2` - Complete
     *
     * @enum {string}
     */
    AnalysisLevelId: '0' | '1' | '2';
    /** @default true */
    ToIDS: boolean;
    /**
     * Format: uuid
     * @example c99506a6-1255-4b71-afa5-7b8ba48c3b1b
     */
    UUID: string;
    /** @example c99506a6-1255-4b71-afa5-7b8ba48c3b1b */
    ExtendsUUID: string | null;
    /**
     * @default 0
     * @example 1617875568
     */
    Timestamp: string;
    /**
     * @default 0
     * @example 1617875568
     */
    NullableTimestamp: string | null;
    /** @example 1581984000000000 */
    MicroTimestamp: string;
    /**
     * @default null
     * @example 1581984000000000
     */
    NullableMicroTimestamp: string | null;
    /** @default false */
    SoftDeletedFlag: boolean;
    /** @default false */
    PublishedFlag: boolean;
    /** @default false */
    DisableCorrelationFlag: boolean;
    /** @default true */
    IsExportable: boolean;
    /** @default true */
    IsGalaxy: boolean;
    /** @default true */
    IsCustomGalaxy: boolean;
    /**
     * Format: int32
     * @default 1
     */
    IsInherited: number;
    IsLocked: boolean;
    IsDefault: boolean;
    IsLocal: boolean;
    /**
     * Format: int32
     * @default 0
     * @enum {integer}
     */
    Local: 0 | 1;
    IsReadOnly: boolean;
    /** @example globe */
    Icon: string;
    /** Format: int32 */
    PageSearchFilter: number | null;
    /** Format: int32 */
    LimitSearchFilter: number | null;
    /**
     * @description Field to be used to sort the result
     * @example timestamp
     */
    SortSearchField: string | null;
    /**
     * @description Sort direction of the result
     * @default asc
     * @enum {string|null}
     */
    DirectionSearchField: 'asc' | 'desc' | null;
    /** @description You can use any of the valid time related filters (examples: 7d, timestamps, [14d, 7d] for ranges, etc.) */
    DateRestSearchFilter: string | null;
    /** @description Interval described by two dates */
    DateIntervalRestSearchFilter: components['schemas']['DateRestSearchFilter'][];
    /** @description Events published within the last x amount of time, where x can be defined in days, hours, minutes (for example 5d or 12h or 30m), ISO 8601 datetime format or timestamp */
    LastRestSearchFilter: number | string | null;
    TagsRestSearchFilter: string[] | null;
    /**
     * @description Search events by matching any tag names, event descriptions, attribute values or attribute comments
     * @example malware
     */
    SearchAllRestSearchFilter: string;
    ToIDSRestSearchFlag: boolean | null;
    /** @description Sharing group ID(s), either as single string or list of IDs */
    SharingGroupIDRestSearchFilter: Record<string, unknown> | null;
    /** @description Specify the decaying model from which the decaying score should be calculated */
    DecayingModelRestSearchFilter: string;
    /** @description An alias to override on-the-fly the threshold of the decaying model */
    DecayingModelScoreRestSearchFilter: string;
    /** @description Will only return the metadata of the given query scope, contained data is omitted. */
    MetadataRestSearchFilter: boolean | null;
    /**
     * @description Include matching eventUuids in the response
     * @default false
     */
    IncludeEventUUIDRestSearchFlag: boolean;
    /**
     * @description Include also exportable tags
     * @default false
     */
    IncludeAllTagsRestSearchFilter: boolean;
    /**
     * @description Include tags of matching events in the response
     * @default false
     */
    IncludeEventTagsRestSearchFlag: boolean;
    /**
     * @description Include proposals of matching events in the response
     * @default false
     */
    IncludeProposalsRestSearchFlag: boolean;
    /** @description Should the warning list be enforced. Adds blocked field for matching attributes */
    EnforceWarninglistRestSearchFilter: boolean | null;
    /**
     * @description Extends the response with the base64 representation of the attachment, if there is one
     * @default false
     */
    WithAttachmentsRestSearchFilter: boolean;
    /** @description List of properties that will be selected in the CSV export */
    RequestedAttributesRestSearchFilter: string[];
    /** @description Adds events context fields in the CSV export */
    IncludeContextRestSearchFlag: boolean | null;
    /** @description Removes header in the CSV export */
    HeaderlessRestSearchFlag: boolean | null;
    IncludeWarninglistHitsRestSearchFlag: boolean | null;
    /** @example mitre-attack */
    AttackGalaxyRestSearchFilter: string | null;
    /** @description Exclude local tags from the export */
    ExcludeLocalTagsRestSearchFilter: boolean | null;
    /** @description Extend response with Sightings DB results if the module is enabled */
    IncludeSightingDbRestSearchFlag: boolean | null;
    IncludeCorrelationsRestSearchFlag: boolean | null;
    /**
     * @description Include all enabled decaying score
     * @default false
     */
    IncludeDecayScoreRestSearchFlag: boolean;
    /**
     * @description Include all model information of matching events in the response
     * @default false
     */
    IncludeFullModelRestSearchFlag: boolean;
    /**
     * @description Allow blocking attributes from to_ids sensitive exports if a proposal has been made to it to remove the IDS flag
     * @default false
     */
    AllowProposalBlockingRestSearchFlag: boolean;
    /**
     * @description Should the decayed elements by excluded
     * @default false
     */
    ExcludeDecayedRestSearchFlag: boolean;
    ModelOverridesRestSearchFilter: components['schemas']['DecayingModelParameters'];
    /** @example 12345 */
    ModelId: string;
    /** @enum {string} */
    ModelName:
      | 'AdminSetting'
      | 'Allowedlist'
      | 'AttachmentScan'
      | 'Attribute'
      | 'AttributeTag'
      | 'AuditLog'
      | 'AuthKey'
      | 'Bruteforce'
      | 'Cerebrate'
      | 'Community'
      | 'CorrelationExclusion'
      | 'Correlation'
      | 'Dashboard'
      | 'DecayingModelMapping'
      | 'DecayingModel'
      | 'EventBlocklist'
      | 'EventDelegation'
      | 'EventGraph'
      | 'EventLock'
      | 'Event'
      | 'EventReport'
      | 'EventTag'
      | 'FavouriteTag'
      | 'Feed'
      | 'FuzzyCorrelateSsdeep'
      | 'GalaxyClusterBlocklist'
      | 'GalaxyCluster'
      | 'GalaxyClusterRelation'
      | 'GalaxyClusterRelationTag'
      | 'GalaxyElement'
      | 'Galaxy'
      | 'Inbox'
      | 'Job'
      | 'Log'
      | 'MispObject'
      | 'Module'
      | 'News'
      | 'NoticelistEntry'
      | 'Noticelist'
      | 'NotificationLog'
      | 'ObjectReference'
      | 'ObjectRelationship'
      | 'ObjectTemplateElement'
      | 'ObjectTemplate'
      | 'Organisation'
      | 'OrgBlocklist'
      | 'Post'
      | 'Regexp'
      | 'RestClientHistory'
      | 'Role'
      | 'Server'
      | 'ShadowAttribute'
      | 'SharingGroupOrg'
      | 'SharingGroup'
      | 'SharingGroupServer'
      | 'SightingdbOrg'
      | 'Sightingdb'
      | 'Sighting'
      | 'TagCollection'
      | 'TagCollectionTag'
      | 'Tag'
      | 'Task'
      | 'TaxonomyEntry'
      | 'Taxonomy'
      | 'TaxonomyPredicate'
      | 'TemplateElementAttribute'
      | 'TemplateElementFile'
      | 'TemplateElement'
      | 'TemplateElementText'
      | 'Template'
      | 'TemplateTag'
      | 'Thread'
      | 'ThreatLevel'
      | 'User'
      | 'UserSetting'
      | 'WarninglistEntry'
      | 'Warninglist'
      | 'WarninglistType';
    /**
     * @description Format of the response payload
     * @enum {string}
     */
    EventsRestSearchReturnFormat:
      | 'json'
      | 'xml'
      | 'csv'
      | 'text'
      | 'stix'
      | 'stix2'
      | 'stix-json'
      | 'attack'
      | 'attack-sightings'
      | 'cache'
      | 'count'
      | 'hashes'
      | 'netfilter'
      | 'opendata'
      | 'openioc'
      | 'rpz'
      | 'snort'
      | 'suricata'
      | 'yara'
      | 'yara-json';
    /**
     * @description Format of the response payload
     * @enum {string}
     */
    AttributesRestSearchReturnFormat:
      | 'json'
      | 'xml'
      | 'csv'
      | 'text'
      | 'hashes'
      | 'cache'
      | 'count'
      | 'netfilter'
      | 'opendata'
      | 'openioc'
      | 'rpz'
      | 'snort'
      | 'suricata'
      | 'yara'
      | 'yara-json';
    /**
     * @description Format of the response payload
     * @enum {string}
     */
    ObjectsRestSearchReturnFormat: 'json';
    /**
     * @description Filter by the attribute object relation value
     * @example filepath
     */
    ObjectRelationRestSearchFilter: string | null;
    /** @example 12345 */
    AuthKeyId: string;
    AuthKey: {
      id?: components['schemas']['AuthKeyId'];
      uuid?: components['schemas']['UUID'];
      authkey_start?: string;
      authkey_end?: string;
      created?: components['schemas']['Timestamp'];
      /**
       * Format: datetime
       * @example 1970-01-01 00:00:00
       */
      expiration?: string | null;
      read_only?: components['schemas']['IsReadOnly'];
      user_id?: components['schemas']['UserId'];
      comment?: string;
      allowed_ips?: string[] | null;
      last_used?: components['schemas']['NullableTimestamp'];
    };
    ApiError: {
      name: string;
      message: string;
      /** @example /attributes */
      url: string;
    };
    UnauthorizedApiError: {
      /** @example Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header. */
      name: string;
      /** @example Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header. */
      message: string;
      /** @example /attributes */
      url: string;
    };
    NotFoundApiError: {
      /** @example Invalid attribute */
      name: string;
      /** @example Invalid attribute */
      message: string;
      /** @example /attributes/1234 */
      url: string;
    };
    NotFoundUserTotpDeleteError: {
      /** @example Invalid user */
      name: string;
      /** @example Invalid user */
      message: string;
      /** @example /users/totp_delete/1 */
      url: string;
    };
  };
  responses: {
    /** @description An attribute */
    AttributeResponse: {
      content: {
        'application/json': {
          Attribute?: components['schemas']['Attribute'];
        };
      };
    };
    /** @description A list of attributes */
    AttributeListResponse: {
      content: {
        'application/json': components['schemas']['AttributeList'];
      };
    };
    /** @description Delete attribute response */
    DeleteAttributeResponse: {
      content: {
        'application/json': {
          /** @example Attribute deleted. */
          message?: string;
        };
      };
    };
    /** @description Add attribute tag response */
    AddAttributeTagResponse: {
      content: {
        'application/json': {
          /** @description `true` if the tag was succesfully added, `false` if it failed */
          saved?: boolean;
          /**
           * @description Present if the tag was succesfully added
           * @example Tag added.
           */
          success?: string | null;
          check_publish?: boolean | null;
          /** @example Tag could not be added. */
          errors?: string | null;
        };
      };
    };
    /** @description Remove attribute tag response */
    RemoveAttributeTagResponse: {
      content: {
        'application/json': {
          /** @description `true` if the tag was succesfully removed, `false` if it failed */
          saved?: boolean;
          /**
           * @description Present if the tag was succesfully added
           * @example Tag removed.
           */
          success?: string | null;
          check_publish?: boolean | null;
          /** @example Tag could not be added. */
          errors?: string | null;
        };
      };
    };
    /** @description Rest search attributes response */
    AttributesRestSearchResponse: {
      headers: {
        'X-Result-Count': components['headers']['X-Result-Count'];
        'X-Export-Module-Used': components['headers']['X-Export-Module-Used'];
        'X-Response-Format': components['headers']['X-Response-Format'];
      };
      content: {
        'application/json': {
          response?: {
            Attribute?: components['schemas']['AttributeRestSearchList'];
          };
        };
      };
    };
    /** @description Attribute statistics response */
    AttributeStatisticsResponse: {
      content: {
        'application/json': components['schemas']['AttributeStatisticsResponse'];
      };
    };
    /** @description Describe attribute categories and types response */
    DescribeAttributeTypesResponse: {
      content: {
        'application/json': components['schemas']['DescribeAttributeTypesResponse'];
      };
    };
    /** @description A freshly created event */
    AddEventResponse: {
      content: {
        'application/json': components['schemas']['CreatedEvent'];
      };
    };
    /** @description A freshly updated event */
    EditEventResponse: {
      content: {
        'application/json': components['schemas']['UpdatedEvent'];
      };
    };
    /** @description Delete event response */
    DeleteEventResponse: {
      content: {
        'application/json': {
          /** @description `true` if the event was succesfully deleted, `false` if it failed */
          saved?: boolean;
          /** @description `true` if the event was succesfully deleted, `false` if it failed */
          success?: boolean | null;
          /** @example Event deleted. */
          name?: string;
          /** @example Could not delete Event */
          message?: string;
          /** @example /events/delete/1 */
          url?: string;
          /**
           * @description Only present if an error occurred when deleting the event
           * @example Event was not deleted.
           */
          errors?: string | null;
        };
      };
    };
    /** @description Add event tag response */
    AddEventTagResponse: {
      content: {
        'application/json': {
          /** @description `true` if the tag was succesfully added, `false` if it failed */
          saved?: boolean;
          /**
           * @description Present if the tag was succesfully added
           * @example Tag added.
           */
          success?: string | null;
          check_publish?: boolean | null;
          /** @example Tag could not be added. */
          errors?: string | null;
        };
      };
    };
    /** @description Remove event tag response */
    RemoveEventTagResponse: {
      content: {
        'application/json': {
          /** @description `true` if the tag was succesfully removed, `false` if it failed */
          saved?: boolean;
          /**
           * @description Present if the tag was succesfully added
           * @example Tag removed.
           */
          success?: string | null;
          check_publish?: boolean | null;
          /** @example Tag could not be added. */
          errors?: string | null;
        };
      };
    };
    /** @description A list of events with extended properties */
    ExtendedEventListResponse: {
      headers: {
        'X-Result-Count': components['headers']['X-Result-Count'];
      };
      content: {
        'application/json': components['schemas']['ExtendedEventList'];
      };
    };
    /** @description An event with extended properties */
    ExtendedEventResponse: {
      content: {
        'application/json': {
          Event?: components['schemas']['ExtendedEvent'];
        };
      };
    };
    /** @description Rest search events response */
    EventsRestSearchResponse: {
      headers: {
        'X-Result-Count': components['headers']['X-Result-Count'];
        'X-Export-Module-Used': components['headers']['X-Export-Module-Used'];
        'X-Response-Format': components['headers']['X-Response-Format'];
      };
      content: {
        'application/json': {
          response?: components['schemas']['EventRestSearchList'];
        };
      };
    };
    /** @description Publish event response */
    PublishEventResponse: {
      content: {
        'application/json': {
          /** @example Publish */
          name?: string;
          /** @example Job queued */
          message?: string;
          /** @example https://misp.local/events/alert/1 */
          url?: string;
          id?: string;
        };
      };
    };
    /** @description Unpublish event response */
    UnpublishEventResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Event unpublished. */
          name?: string;
          /** @example Event unpublished. */
          message?: string;
          /** @example /events/unpublish/1 */
          url?: string;
        };
      };
    };
    /** @description A list of galaxies */
    GalaxyListResponse: {
      content: {
        'application/json': {
          Galaxy?: components['schemas']['Galaxy'];
        }[];
      };
    };
    /** @description A extended galaxy response */
    ExtendedGalaxyResponse: {
      content: {
        'application/json': components['schemas']['ExtendedGalaxy'];
      };
    };
    /** @description Update galaxies response */
    UpdateGalaxiesResponse: {
      content: {
        'application/json': {
          /** @description Present and `true` if the galaxies were succesfully updated. */
          saved?: boolean | null;
          /** @description Present and `true` if the galaxies were succesfully updated. */
          success?: boolean | null;
          /** @example Galaxies updated. */
          name?: string;
          /** @example Galaxies updated. */
          message?: string;
          /** @example /galaxies/update */
          url?: string;
        };
      };
    };
    /** @description Delete galaxy response */
    DeleteGalaxyResponse: {
      content: {
        'application/json': {
          /** @description Present and `true` if the galaxy was succesfully removed. */
          saved?: boolean | null;
          /** @description Present and `true` if the galaxy was succesfully removed. */
          success?: boolean | null;
          /** @example Galaxy deleted */
          name?: string;
          /** @example Galaxy deleted */
          message?: string;
          /** @example /galaxies/delete */
          url?: string;
        };
      };
    };
    /** @description Import galaxy cluster response */
    ImportGalaxyClusterResponse: {
      content: {
        'application/json': {
          /** @description Present and `true` if the galaxy was succesfully imported. */
          saved?: boolean | null;
          /** @description Present and `true` if the galaxy was succesfully imported. */
          success?: boolean | null;
          /** @example 'Galaxy clusters imported. 1 imported, 0 ignored, 0 failed. */
          name?: string;
          /** @example 'Galaxy clusters imported. 1 imported, 0 ignored, 0 failed. */
          message?: string;
          /** @example /galaxies/import */
          url?: string;
        };
      };
    };
    /** @description Export galaxy clusters response */
    ExportGalaxyClustersResponse: {
      content: {
        'application/json':
          | components['schemas']['GalaxyCluster'][]
          | components['schemas']['GalaxyMispFormat'];
      };
    };
    /** @description Attach galaxy cluster response */
    AttachGalaxyClusterResponse: {
      content: {
        'application/json': {
          /** @description Present and `true` if the galaxy cluster was succesfully attached. */
          saved?: boolean;
          /**
           * @description Status message of the operation.
           * @example Cluster attached.
           */
          success?: string;
          check_publish?: boolean;
        };
      };
    };
    /** @description Galaxy cluster by ID response */
    GalaxyClusterResponse: {
      content: {
        'application/json': {
          GalaxyCluster?: components['schemas']['GalaxyCluster'];
        };
      };
    };
    /** @description Extended galaxy cluster by ID response */
    ExtendedGalaxyClusterResponse: {
      content: {
        'application/json': {
          GalaxyCluster?: components['schemas']['ExtendedGalaxyCluster'];
        };
      };
    };
    /** @description Get galaxy clusters response */
    GalaxyClusterListResponse: {
      content: {
        'application/json': {
          GalaxyCluster?: components['schemas']['GalaxyCluster'];
        }[];
      };
    };
    /** @description Publish galaxy cluster response */
    PublishGalaxyClusterResponse: {
      content: {
        'application/json': {
          /** @example Publish job queued. Job ID: 4e9d26c275a7b190fcab10029df8c6b6 */
          message?: string;
        };
      };
    };
    /** @description Unpublish galaxy cluster response */
    UnpublishGalaxyClusterResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example GalaxyCluster unpublished */
          name?: string;
          /** @example GalaxyCluster unpublished */
          message?: string;
          /** @example /galaxy_clusters/publish/1 */
          url?: string;
        };
      };
    };
    /** @description Delete galaxy cluster response */
    DeleteGalaxyClusterResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Galaxy cluster successfuly soft deleted. */
          name?: string;
          /** @example Galaxy cluster successfuly soft deleted. */
          message?: string;
          /** @example /galaxy_clusters/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Restore galaxy cluster response */
    RestoreGalaxyClusterResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example GalaxyCluster restored */
          name?: string;
          /** @example GalaxyCluster restored */
          message?: string;
          /** @example /galaxy_clusters/restore/1 */
          url?: string;
        };
      };
    };
    /** @description Reset user password response */
    ResetUserPasswordResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          /** @example New credentials sent. */
          success?: string;
        };
      };
    };
    /** @description User response */
    UserResponse: {
      content: {
        'application/json': components['schemas']['User'];
      };
    };
    /** @description User list response */
    UserListResponse: {
      content: {
        'application/json': components['schemas']['UserList'];
      };
    };
    /** @description Extended user response */
    ExtendedUserResponse: {
      content: {
        'application/json': components['schemas']['ExtendedUser'];
      };
    };
    /** @description Delete user response */
    DeleteUserResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example User deleted. */
          name?: string;
          /** @example User deleted. */
          message?: string;
          /** @example /admin/users/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Delete user TOTP response */
    DeleteUserTotpResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example User TOTP deleted. */
          name?: string;
          /** @example User TOTP deleted. */
          message?: string;
          /** @example /users/totp_delete/1 */
          url?: string;
          /** @example 1 */
          id?: string;
        };
      };
    };
    /** @description Organization list response */
    OrganisationResponse: {
      content: {
        'application/json': components['schemas']['Organisation'];
      };
    };
    /** @description Organization list response */
    OrganisationListResponse: {
      content: {
        'application/json': components['schemas']['OrganisationList'];
      };
    };
    /** @description Delete organization response */
    DeleteOrganisationResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Organization deleted */
          name?: string;
          /** @example Organization deleted */
          message?: string;
          /** @example /admin/organisations/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Server response */
    ServerResponse: {
      content: {
        'application/json': {
          Server?: components['schemas']['Server'];
        };
      };
    };
    /** @description Server list response */
    ServerListResponse: {
      content: {
        'application/json': components['schemas']['ServerList'];
      };
    };
    /** @description Delete server response */
    DeleteServerResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Server deleted */
          name?: string;
          /** @example Server deleted */
          message?: string;
          /** @example /servers/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Pull server response */
    PullServerResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Pull queued for background execution. Job ID: 1 */
          name?: string;
          /** @example Pull queued for background execution. Job ID: 1 */
          message?: string;
          /** @example /servers/pull/1 */
          url?: string;
        };
      };
    };
    /** @description Push server response */
    PushServerResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Push queued for background execution. Job ID: 1 */
          name?: string;
          /** @example Push queued for background execution. Job ID: 1 */
          message?: string;
          /** @example /servers/push/1 */
          url?: string;
        };
      };
    };
    /** @description Server version */
    ServerVersionResponse: {
      content: {
        'application/json': {
          /** @example 2.4.142 */
          version?: string;
          perm_sync?: boolean | null;
          perm_sighting?: boolean | null;
          perm_galaxy_editor?: boolean | null;
          request_encoding?: ('gzip' | 'br')[];
        };
      };
    };
    /** @description Server PyMISP version */
    ServerPyMISPVersionResponse: {
      content: {
        'application/json': {
          /** @example 2.4.142 */
          version?: string;
        };
      };
    };
    /** @description Server settings and diagnostics */
    ServerSettingsResponse: {
      content: {
        'application/json': {
          version?: {
            /** @example v2.4.142 */
            current?: string;
            /** @example v2.4.142 */
            newest?: string;
            /** @example same */
            upToDate?: string;
          };
          phpSettings?: {
            max_execution_time?: components['schemas']['PhpServerSetting'];
            memory_limit?: components['schemas']['PhpServerSetting'];
            upload_max_filesize?: components['schemas']['PhpServerSetting'];
            post_max_size?: components['schemas']['PhpServerSetting'];
          };
          /** @example FAIL: Failed to load GnuPG */
          gpgStatus?: string;
          /** @example not configured (so not tested) */
          proxyStatus?: string;
          /** @example 1 */
          zmqStatus?: number;
          stix?: {
            /** @example 1 */
            operational?: number;
            stix?: components['schemas']['ServerPackageVersion'];
            cybox?: components['schemas']['ServerPackageVersion'];
            mixbox?: components['schemas']['ServerPackageVersion'];
            maec?: components['schemas']['ServerPackageVersion'];
            stix2?: components['schemas']['ServerPackageVersion'];
            pymisp?: components['schemas']['ServerPackageVersion'];
          };
          moduleStatus?: {
            /** @example 1 */
            Enrichment?: number;
            /** @example 1 */
            Import?: number;
            /** @example 1 */
            Export?: number;
            /** @example 1 */
            Cortex?: number;
          };
          /**
           * @example {
           *   "/tmp": 0,
           *   "/var/www/MISP/app/tmp": 0,
           *   "/var/www/MISP/app/files": 0,
           *   "/var/www/MISP/app/files/scripts/tmp": 0
           * }
           */
          writeableDirs?: Record<string, never>;
          /**
           * @example {
           *   "/var/www/MISP/app/Config/config.php": 0,
           *   "/var/www/MISP/.git/ORIG_HEAD": 2
           * }
           */
          writeableFiles?: Record<string, never>;
          /**
           * @example {
           *   "/var/www/MISP/app/files/scripts/stixtest.py": 0
           * }
           */
          readableFiles?: Record<string, never>;
          /**
           * @example {
           *   "admin_settings": {
           *     "table": "admin_settings",
           *     "used": "0.03 MB",
           *     "reclaimable": "0 MB",
           *     "data_in_bytes": 16384,
           *     "index_in_bytes": 16384,
           *     "reclaimable_in_bytes": 0
           *   },
           *   "allowedlist": {
           *     "table": "allowedlist",
           *     "used": "0.02 MB",
           *     "reclaimable": "0 MB",
           *     "data_in_bytes": 16384,
           *     "index_in_bytes": 0,
           *     "reclaimable_in_bytes": 0
           *   }
           * }
           */
          dbDiagnostics?: Record<string, never>;
          dbSchemaDiagnostics?: {
            /** @example Database/Mysql */
            dataSource?: string;
            /** @example 68 */
            actual_db_version?: string;
            checked_table_column?: string[];
            diagnostic?: Record<string, never>;
            diagnostic_index?: Record<string, never> | Record<string, never>[];
            /** @example 70 */
            expected_db_version?: string;
            error?: string;
            update_locked?: boolean;
            /** @example 0 */
            remaining_lock_time?: number;
            update_fail_number_reached?: boolean;
            /**
             * @example {
             *   "admin_settings": {
             *     "id": true,
             *     "setting": false
             *   }
             * }
             */
            indexes?: Record<string, never>;
            /**
             * @example {
             *   "admin_settings": [
             *     "id",
             *     "setting",
             *     "value"
             *   ]
             * }
             */
            columnPerTable?: Record<string, never>;
          };
          /**
           * @example {
           *   "extensionVersion": "5.1.1",
           *   "connection": true,
           *   "redis_version": "5.0.7",
           *   "redis_git_sha1": 0,
           *   "redis_git_dirty": 0,
           *   "redis_build_id": "636cde3b5c7a3923",
           *   "redis_mode": "standalone",
           *   "os": "Linux 5.8.0-50-generic x86_64",
           *   "arch_bits": 64,
           *   "multiplexing_api": "epoll",
           *   "atomicvar_api": "atomic-builtin",
           *   "gcc_version": "9.2.1",
           *   "process_id": 1051,
           *   "run_id": "f894944d92c978df93a18821fb5ebe30dfd0b257",
           *   "tcp_port": 6379,
           *   "uptime_in_seconds": 327116,
           *   "uptime_in_days": 3,
           *   "hz": 10,
           *   "configured_hz": 10,
           *   "lru_clock": 10365184,
           *   "executable": "/usr/bin/redis-server",
           *   "config_file": "/etc/redis/redis.conf",
           *   "connected_clients": 18,
           *   "client_recent_max_input_buffer": 2,
           *   "client_recent_max_output_buffer": 0,
           *   "blocked_clients": 0,
           *   "used_memory": 1309488,
           *   "used_memory_human": "1.25M",
           *   "used_memory_rss": 5541888,
           *   "used_memory_rss_human": "5.29M",
           *   "used_memory_peak": 1410464,
           *   "used_memory_peak_human": "1.35M",
           *   "used_memory_peak_perc": "92.84%",
           *   "used_memory_overhead": 1200800,
           *   "used_memory_startup": 796232,
           *   "used_memory_dataset": 108688,
           *   "used_memory_dataset_perc": "21.18%",
           *   "allocator_allocated": 1480176,
           *   "allocator_active": 1896448,
           *   "allocator_resident": 5890048,
           *   "total_system_memory": 33406590976,
           *   "total_system_memory_human": "31.11G",
           *   "used_memory_lua": 41984,
           *   "used_memory_lua_human": "41.00K",
           *   "used_memory_scripts": 0,
           *   "used_memory_scripts_human": "0B",
           *   "number_of_cached_scripts": 0,
           *   "maxmemory": 0,
           *   "maxmemory_human": "0B",
           *   "maxmemory_policy": "noeviction",
           *   "allocator_frag_ratio": 1.28,
           *   "allocator_frag_bytes": 416272,
           *   "allocator_rss_ratio": 3.11,
           *   "allocator_rss_bytes": 3993600,
           *   "rss_overhead_ratio": 0.94,
           *   "rss_overhead_bytes": -348160,
           *   "mem_fragmentation_ratio": 4.24,
           *   "mem_fragmentation_bytes": 4233432,
           *   "mem_not_counted_for_evict": 0,
           *   "mem_replication_backlog": 0,
           *   "mem_clients_slaves": 0,
           *   "mem_clients_normal": 402912,
           *   "mem_aof_buffer": 0,
           *   "mem_allocator": "jemalloc-5.2.1",
           *   "active_defrag_running": 0,
           *   "lazyfree_pending_objects": 0,
           *   "loading": 0,
           *   "rdb_changes_since_last_save": 0,
           *   "rdb_bgsave_in_progress": 0,
           *   "rdb_last_save_time": 1620977919,
           *   "rdb_last_bgsave_status": "ok",
           *   "rdb_last_bgsave_time_sec": 0,
           *   "rdb_current_bgsave_time_sec": -1,
           *   "rdb_last_cow_size": 446464,
           *   "aof_enabled": 0,
           *   "aof_rewrite_in_progress": 0,
           *   "aof_rewrite_scheduled": 0,
           *   "aof_last_rewrite_time_sec": -1,
           *   "aof_current_rewrite_time_sec": -1,
           *   "aof_last_bgrewrite_status": "ok",
           *   "aof_last_write_status": "ok",
           *   "aof_last_cow_size": 0,
           *   "total_connections_received": 289,
           *   "total_commands_processed": 252747,
           *   "instantaneous_ops_per_sec": 7,
           *   "total_net_input_bytes": 12111506,
           *   "total_net_output_bytes": 1232466,
           *   "instantaneous_input_kbps": 0.36,
           *   "instantaneous_output_kbps": 0.03,
           *   "rejected_connections": 0,
           *   "sync_full": 0,
           *   "sync_partial_ok": 0,
           *   "sync_partial_err": 0,
           *   "expired_keys": 17,
           *   "expired_stale_perc": 0,
           *   "expired_time_cap_reached_count": 0,
           *   "evicted_keys": 0,
           *   "keyspace_hits": 70,
           *   "keyspace_misses": 62805,
           *   "pubsub_channels": 0,
           *   "pubsub_patterns": 0,
           *   "latest_fork_usec": 168,
           *   "migrate_cached_sockets": 0,
           *   "slave_expires_tracked_keys": 0,
           *   "active_defrag_hits": 0,
           *   "active_defrag_misses": 0,
           *   "active_defrag_key_hits": 0,
           *   "active_defrag_key_misses": 0,
           *   "role": "master",
           *   "connected_slaves": 0,
           *   "master_replid": "d5e7afcf4fd1a31e539a4eadd5caf2a7da6d121c",
           *   "master_replid2": 0,
           *   "master_repl_offset": 0,
           *   "second_repl_offset": -1,
           *   "repl_backlog_active": 0,
           *   "repl_backlog_size": 1048576,
           *   "repl_backlog_first_byte_offset": 0,
           *   "repl_backlog_histlen": 0,
           *   "used_cpu_sys": 195.014281,
           *   "used_cpu_user": 217.352183,
           *   "used_cpu_sys_children": 0.050885,
           *   "used_cpu_user_children": 0.076436,
           *   "cluster_enabled": 0,
           *   "db0": "keys=15,expires=0,avg_ttl=0",
           *   "db13": "keys=12,expires=4,avg_ttl=21265731140"
           * }
           */
          redisInfo?: Record<string, never>;
          finalSettings?: components['schemas']['MispSetting'][];
          extensions?: {
            cli?: {
              /** @example 7.4.3 */
              phpversion?: string;
            };
            /**
             * @example {
             *   "json": {
             *     "web_version": "7.4.3",
             *     "web_version_outdated": false,
             *     "cli_version": "7.4.3",
             *     "cli_version_outdated": false,
             *     "required": true,
             *     "info": null
             *   }
             * }
             */
            extensions?: Record<string, never>;
          };
          workers?: {
            cache?: components['schemas']['WorkersStatus'];
            default?: components['schemas']['WorkersStatus'];
            email?: components['schemas']['WorkersStatus'];
            prio?: components['schemas']['WorkersStatus'];
            update?: components['schemas']['WorkersStatus'];
            scheduler?: components['schemas']['WorkersStatus'];
            proc_accessible?: boolean;
            controls?: boolean;
          };
        };
      };
    };
    /** @description Start worker response */
    StartWorkerResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Worker start signal sent */
          name?: string;
          /** @example Worker start signal sent */
          message?: string;
          /** @example /servers/startWorker/email */
          url?: string;
        };
      };
    };
    /** @description Stop worker response */
    StopWorkerResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Worker stop signal sent */
          name?: string;
          /** @example Worker stop signal sent */
          message?: string;
          /** @example /servers/startWorker/1234 */
          url?: string;
        };
      };
    };
    /** @description Kill all workers response */
    KillAllWorkersResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Killing workers. */
          name?: string;
          /** @example Killing workers. */
          message?: string;
          /** @example /servers/killAllWorkers */
          url?: string;
        };
      };
    };
    /** @description Restart workers response */
    RestartWorkersResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Restarting workers. */
          name?: string;
          /** @example Restarting workers. */
          message?: string;
          /** @example /servers/restartWorkers */
          url?: string;
        };
      };
    };
    /** @description Restart dead workers response */
    RestartDeadWorkersResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Restarting workers. */
          name?: string;
          /** @example Restarting workers. */
          message?: string;
          /** @example /servers/restartDeadWorkers */
          url?: string;
        };
      };
    };
    /** @description Stop worker response */
    GetWorkersResponse: {
      content: {
        'application/json': {
          cache?: components['schemas']['WorkersStatus'];
          default?: components['schemas']['WorkersStatus'];
          email?: components['schemas']['WorkersStatus'];
          prio?: components['schemas']['WorkersStatus'];
          update?: components['schemas']['WorkersStatus'];
          scheduler?: components['schemas']['WorkersStatus'];
          proc_accessible?: boolean;
          controls?: boolean;
        };
      };
    };
    /** @description Update server response */
    UpdateServerResponse: {
      content: {
        'application/json': {
          results?: (components['schemas']['UpdateServerResultItem'] | string)[];
        };
      };
    };
    /** @description Cache server response */
    CacheServerResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Server caching job initiated. */
          name?: string;
          /** @example Server caching job initiated. */
          message?: string;
          /** @example /servers/cache */
          url?: string;
        };
      };
    };
    /** @description Create server sync */
    CreateSyncResponse: {
      content: {
        'application/json': {
          Server?: {
            /** @example https://misppriv.circl.lu */
            url?: string;
            uuid?: components['schemas']['UUID'];
            authkey?: components['schemas']['AuthKeyRaw'];
            Organisation?: {
              name?: components['schemas']['OrganisationName'];
              uuid?: components['schemas']['UUID'];
            };
          };
        };
      };
    };
    /** @description Get instance UUID response */
    GetInstanceUUIDResponse: {
      content: {
        'application/json': {
          uuid?: components['schemas']['UUID'];
        };
      };
    };
    /** @description Get setting response */
    GetServerSettingResponse: {
      content: {
        'application/json': components['schemas']['MispSetting'];
      };
    };
    /** @description Edit setting response */
    EditServerSettingResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Field updated */
          name?: string;
          /** @example Field updated */
          message?: string;
          /** @example /servers/serverSettingsEdit */
          url?: string;
        };
      };
    };
    /** @description Get sharing group response */
    SharingGroupResponse: {
      content: {
        'application/json': {
          SharingGroup?: components['schemas']['SharingGroup'];
          Organisation?: components['schemas']['Organisation'];
          SharingGroupOrg?: components['schemas']['SharingGroupOrganisation'][];
          SharingGroupServer?: components['schemas']['SharingGroupServer'][];
          editable?: boolean;
          deletable?: boolean;
        };
      };
    };
    /** @description Get sharing groups response */
    SharingGroupListResponse: {
      content: {
        'application/json': {
          response?: components['schemas']['SharingGroupListItem'][];
        };
      };
    };
    /** @description Delete sharing group response */
    DeleteSharingGroupResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example SharingGroup deleted */
          name?: string;
          /** @example SharingGroup deleted */
          message?: string;
          /** @example /sharing_groups/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Add organization to a sharing group response */
    AddOrganisationToSharingGroupResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Organization added to the sharing group. */
          name?: string;
          /** @example Organization added to the sharing group. */
          message?: string;
          /** @example /sharing_groups/addOrg */
          url?: string;
        };
      };
    };
    /** @description Remove organization from a sharing group response */
    RemoveOrganisationFromSharingGroupResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Organization removed from the sharing group. */
          name?: string;
          /** @example Organization removed from the sharing group. */
          message?: string;
          /** @example /sharing_groups/removeOrg */
          url?: string;
        };
      };
    };
    /** @description Add server to a sharing group response */
    AddServerToSharingGroupResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Server added to the sharing group. */
          name?: string;
          /** @example Server added to the sharing group. */
          message?: string;
          /** @example /sharing_groups/addServer */
          url?: string;
        };
      };
    };
    /** @description Remove server from a sharing group response */
    RemoveServerFromSharingGroupResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Server removed from the sharing group. */
          name?: string;
          /** @example Server removed from the sharing group. */
          message?: string;
          /** @example /sharing_groups/removeServer */
          url?: string;
        };
      };
    };
    /** @description Get feeds response */
    FeedListResponse: {
      content: {
        'application/json': {
          Feed?: components['schemas']['Feed'];
        }[];
      };
    };
    /** @description Get feed response */
    FeedResponse: {
      content: {
        'application/json': {
          Feed?: components['schemas']['Feed'];
        };
      };
    };
    /** @description Enable feed response */
    EnableFeedResponse: {
      content: {
        'application/json': {
          /** @example Feed enabled. */
          name?: string;
          /** @example Feed enabled. */
          message?: string;
          /** @example /feeds/enable/1 */
          url?: string;
        };
      };
    };
    /** @description Disable feed response */
    DisableFeedResponse: {
      content: {
        'application/json': {
          /** @example Feed disabled. */
          name?: string;
          /** @example Feed disabled. */
          message?: string;
          /** @example /feeds/disable/1 */
          url?: string;
        };
      };
    };
    /** @description Cache feeds response */
    CacheFeedsResponse: {
      content: {
        'application/json': {
          /** @example Feed caching job initiated. */
          name?: string;
          /** @example Feed caching job initiated. */
          message?: string;
          /** @example /feeds/cacheFeed */
          url?: string;
        };
      };
    };
    /** @description Fetch feed response */
    FetchFromFeedResponse: {
      content: {
        'application/json': {
          /** @example Pull queued for background execution. */
          result?: string;
        };
      };
    };
    /** @description Fetch all feeds response */
    FetchFromAllFeedsResponse: {
      content: {
        'application/json': {
          /** @example Pull queued for background execution. */
          result?: string;
        };
      };
    };
    /** @description Get warninglists response */
    WarninglistListResponse: {
      content: {
        'application/json': {
          Warninglists?: {
            Warninglist?: components['schemas']['Warninglist'];
          }[];
        };
      };
    };
    /** @description Toggle enable warninglists response */
    WarninglistToggleEnabledResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          /** @example 1 warninglist(s) disabled */
          success?: string;
        };
      };
    };
    /** @description Get warninglists response */
    WarninglistResponse: {
      content: {
        'application/json': {
          Warninglist?: components['schemas']['Warninglist'];
        };
      };
    };
    /** @description List of values matching warninglists response */
    WarninglistMatchListResponse: {
      content: {
        'application/json': Record<string, never>;
      };
    };
    /** @description List of values matching warninglists response */
    UpdateWarninglistsResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean | null;
          /** @example Successfully updated 1 warninglists. */
          name?: string;
          /** @example Successfully updated 1 warninglists. */
          message?: string;
          /** @example /warninglists/update */
          url?: string;
        };
      };
    };
    /** @description Get noticelists response */
    NoticelistListResponse: {
      content: {
        'application/json': {
          Noticelist?: components['schemas']['Noticelist'];
        }[];
      };
    };
    /** @description Get noticelist response */
    NoticelistResponse: {
      content: {
        'application/json': {
          Noticelist?: components['schemas']['Noticelist'];
        };
      };
    };
    /** @description Toggle enable noticelist response */
    NoticelistToggleEnableResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Noticelist enabled. */
          name?: string;
          /** @example Noticelist enabled. */
          message?: string;
          /** @example /noticelists/toggleEnable/1 */
          url?: string;
        };
      };
    };
    /** @description Toggle enable noticelist response */
    UpdateNoticelistsResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Successfully updated 1 noticelists. */
          name?: string;
          /** @example Successfully updated 1 noticelists. */
          message?: string;
          /** @example /noticelists/update */
          url?: string;
        };
      };
    };
    /** @description Object response */
    ObjectResponse: {
      content: {
        'application/json': {
          Object?: components['schemas']['Object'];
        };
      };
    };
    /** @description Extended object response */
    ExtendedObjectResponse: {
      content: {
        'application/json': {
          Object?: components['schemas']['ExtendedObject'];
        };
      };
    };
    /** @description Delete object response */
    DeleteObjectResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Object deleted */
          name?: string;
          /** @example Object deleted */
          message?: string;
          /** @example /objects/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Rest search objects response */
    ObjectsRestSearchResponse: {
      headers: {
        'X-Result-Count': components['headers']['X-Result-Count'];
        'X-Export-Module-Used': components['headers']['X-Export-Module-Used'];
        'X-Response-Format': components['headers']['X-Response-Format'];
      };
      content: {
        'application/json': {
          response?: components['schemas']['ObjectRestSearchList'][];
        };
      };
    };
    /** @description Get sightings response */
    SightingListResponse: {
      content: {
        'application/json': components['schemas']['Sighting'][];
      };
    };
    /** @description Add sighting response */
    SightingResponse: {
      content: {
        'application/json': components['schemas']['Sighting'];
      };
    };
    /** @description Delete sighting response */
    DeleteSightingResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Sighting successfully deleted. */
          name?: string;
          /** @example Sighting successfully deleted. */
          message?: string;
          /** @example /sightings/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Tag list response */
    TagListResponse: {
      content: {
        'application/json': {
          Tag?: components['schemas']['TagList'];
        };
      };
    };
    /** @description Tag response */
    TagResponse: {
      content: {
        'application/json': components['schemas']['Tag'];
      };
    };
    /** @description Delete tag response */
    DeleteTagResponse: {
      content: {
        'application/json': {
          /** @example Tag deleted. */
          name?: string;
          /** @example Tag deleted. */
          message?: string;
          /** @example https://misppriv.circl.lu/tags/delete/1 */
          url?: string;
        };
      };
    };
    /** @description Tag response */
    EditTagResponse: {
      content: {
        'application/json': {
          Tag?: components['schemas']['Tag'];
        };
      };
    };
    /** @description Search tag response */
    SearchTagResponse: {
      content: {
        'application/json': components['schemas']['ExtendedTag'][];
      };
    };
    /** @description Get logs response */
    GetLogsResponse: {
      content: {
        'application/json': {
          Log?: components['schemas']['Log'];
        }[];
      };
    };
    /** @description Get auth keys response */
    GetAuthKeysResponse: {
      content: {
        'application/json': {
          AuthKey?: components['schemas']['AuthKey'];
          User?: {
            id?: components['schemas']['UserId'];
            /** Format: email */
            email?: string;
          };
        }[];
      };
    };
    /** @description Auth key response */
    AddAuthKeyResponse: {
      content: {
        'application/json': {
          AuthKey?: components['schemas']['AuthKey'];
        };
      };
    };
    /** @description Auth key response */
    AuthKeyResponse: {
      content: {
        'application/json': {
          AuthKey?: components['schemas']['AuthKey'];
          User?: {
            id?: components['schemas']['UserId'];
            org_id?: components['schemas']['OrganisationId'];
            /** Format: email */
            email?: string | null;
          };
        };
      };
    };
    /** @description Delete auth key response */
    DeleteAuthKeyResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example AuthKey deleted. */
          name?: string;
          /** @example AuthKey deleted. */
          message?: string;
          /** @example /auth_keys/delete/1234 */
          url?: string;
        };
      };
    };
    /** @description Get user settings response */
    GetUserSettingsResponse: {
      content: {
        'application/json': {
          UserSetting?: components['schemas']['UserSetting'];
        }[];
      };
    };
    /** @description Get user setting response */
    UserSettingResponse: {
      content: {
        'application/json': {
          UserSetting?: components['schemas']['UserSetting'];
        };
      };
    };
    /** @description Delete user setting response */
    DeleteUserSettingResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Setting deleted. */
          name?: string;
          /** @example Setting deleted. */
          message?: string;
          /** @example /user_settings/delete/1234 */
          url?: string;
        };
      };
    };
    /** @description Get taxonomies response */
    GetTaxonomiesResponse: {
      content: {
        'application/json': {
          Taxonomy?: components['schemas']['Taxonomy'];
          /** @description Amount of related tags to this taxonomy. */
          total_count?: number;
          /** @description Amount of active related tags to this taxonomy. */
          current_count?: number;
        }[];
      };
    };
    /** @description Get taxonomy response */
    TaxonomiesResponse: {
      content: {
        'application/json': {
          Taxonomy?: components['schemas']['Taxonomy'];
          entries?: components['schemas']['TaxonomyEntry'][];
        };
      };
    };
    /** @description Enable taxonomy response */
    EnableTaxonomyResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Taxonomy enabled */
          name?: string;
          /** @example Taxonomy enabled */
          message?: string;
          /** @example /taxonomies/enable/1234 */
          url?: string;
        };
      };
    };
    /** @description Disable taxonomy response */
    DisableTaxonomyResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Taxonomy disabled */
          name?: string;
          /** @example Taxonomy disabled */
          message?: string;
          /** @example /taxonomies/disabled/1234 */
          url?: string;
        };
      };
    };
    /** @description Update taxonomies response */
    UpdateTaxonomiesResponse: {
      content: {
        'application/json': {
          saved?: boolean;
          success?: boolean;
          /** @example Successfully updated 120 taxonomy libraries. */
          name?: string;
          /** @example Successfully updated 120 taxonomy libraries. */
          message?: string;
          /** @example /taxonomies/update */
          url?: string;
        };
      };
    };
    /** @description Get taxonomy tags response */
    GetTaxonomyTagsResponse: {
      content: {
        'application/json': {
          Taxonomy?: components['schemas']['Taxonomy'];
          entries?: components['schemas']['ExtendedTaxonomyEntry'][];
        };
      };
    };
    /** @description Export taxonomy response */
    ExportTaxonomyTagsResponse: {
      content: {
        'application/json': {
          namespace?: components['schemas']['TaxonomyNamespace'];
          description?: components['schemas']['TaxonomyDescription'];
          version?: number;
          exclusive?: boolean;
          predicates?: components['schemas']['TaxonomyPredicateExport'][];
          values?: components['schemas']['TaxonomyValueExport'][];
        };
      };
    };
    /** @description Unexpected API error */
    ApiErrorResponse: {
      content: {
        'application/json': components['schemas']['ApiError'];
      };
    };
    /** @description The specified resource was not found */
    NotFoundApiErrorResponse: {
      content: {
        'application/json': components['schemas']['NotFoundApiError'];
      };
    };
    /** @description The specified resource was not found */
    NotFoundUserTotpDeleteResponse: {
      content: {
        'application/json': components['schemas']['NotFoundUserTotpDeleteError'];
      };
    };
    /** @description Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header. */
    UnauthorizedApiErrorResponse: {
      content: {
        'application/json': components['schemas']['UnauthorizedApiError'];
      };
    };
  };
  parameters: {
    /** @description UUID or numeric ID of the event */
    eventIdParameter: components['schemas']['EventId'] | components['schemas']['UUID'];
    /** @description UUID or numeric ID of the attribute */
    attributeIdParameter: components['schemas']['AttributeId'] | components['schemas']['UUID'];
    /** @description Numeric ID of the attribute */
    tagIdParameter: components['schemas']['TagId'];
    /** @description Whether the object should be attached locally or not to the target */
    localParameter: components['schemas']['Local'];
    /** @description Tag search term */
    tagSearchTermParameter: string;
    /** @description UUID or numeric ID of the galaxy */
    galaxyIdParameter: components['schemas']['GalaxyId'] | components['schemas']['UUID'];
    /** @description UUID or numeric ID of the galaxy cluster */
    galaxyClusterIdParameter:
      | components['schemas']['GalaxyClusterId']
      | components['schemas']['UUID'];
    /** @description Numeric ID of the user */
    userIdParameter: components['schemas']['UserId'];
    /** @description First time reset is set to `1` only  for new user registrations. */
    firstTimeResetParameter: '0' | '1';
    /** @description UUID or numeric ID of the organization */
    organisationIdParameter:
      | components['schemas']['OrganisationId']
      | components['schemas']['UUID'];
    /** @description UUID or numeric ID of the server */
    serverIdParameter: components['schemas']['ServerId'] | components['schemas']['UUID'];
    /** @description Pull technique to be used for pulling events from this instance. */
    pullTechniqueParameter: 'full' | 'incremental' | 'pull_relevant_clusters';
    /** @description Push technique to be used for pushing events to this instance. */
    pushTechniqueParameter: 'full' | 'incremental';
    /** @description Worker type. */
    workerTypeParameter: 'default' | 'email' | 'scheduler' | 'cache' | 'prio' | 'update';
    /** @description Worker PID. */
    workerPidParameter: string;
    /** @description Setting name. */
    settingNameParameter: string;
    /** @description UUID or numeric ID of the sharing group */
    sharingGroupIdParameter:
      | components['schemas']['SharingGroupId']
      | components['schemas']['UUID'];
    /** @description UUID or numeric ID of the sharing group server */
    sharingGroupServerIdParameter: components['schemas']['SharingGroupServerId'];
    /** @description UUID or numeric ID of the feed */
    feedIdParameter: components['schemas']['FeedId'] | components['schemas']['UUID'];
    /** @description Numeric ID of the warninglist */
    warninglistIdParameter: components['schemas']['WarninglistId'];
    /** @description Numeric ID of the noticelist */
    noticelistIdParameter: components['schemas']['NoticelistId'];
    /** @description UUID or numeric ID of the sighting */
    sightingIdParameter: components['schemas']['SightingId'];
    /** @description Cache feeds strategy */
    cacheFeedsScopeParameter: 'all' | 'csv' | 'freetext';
    /** @description UUID or numeric ID of the target entity (Event, Attribute or TagCollection) */
    attachTargetIdParameter:
      | components['schemas']['EventId']
      | components['schemas']['AttributeId']
      | components['schemas']['TagCollectionId'];
    /** @description Type of the target entity to attach to the galaxy cluster. */
    attachTargetTypeParameter: 'event' | 'attribute' | 'tag_collection';
    /** @description Context of the statistics. */
    attributeStatisticsContextParameter: 'type' | 'category';
    /** @description `0` to show attribute count, `1` for showing percentages */
    attributeStatisticsPercentageParameter: number;
    /** @description UUID or numeric ID of the object */
    objectIdParameter: components['schemas']['ObjectId'] | components['schemas']['UUID'];
    /** @description `1` for hard delete the entity, `0` for soft deletion. */
    hardDeleteParameter: '0' | '1';
    /** @description UUID or numeric ID of the object template */
    objectTemplateIdParameter:
      | components['schemas']['ObjectTemplateId']
      | components['schemas']['UUID'];
    /** @description UUID or numeric ID of the auth key */
    authKeyIdParameter: components['schemas']['AuthKeyId'] | components['schemas']['UUID'];
    /** @description UUID or numeric ID of the user setting */
    userSettingIdParameter: components['schemas']['UserSettingId'];
    /** @description Name of the user setting */
    userSettingNameParameter: components['schemas']['UserSettingName'];
    /** @description Numeric ID of the taxonomy */
    taxonomyIdParameter: components['schemas']['TaxonomyId'];
  };
  requestBodies: {
    AddAttributeRequest: {
      content: {
        'application/json': components['schemas']['AttributeNoId'];
      };
    };
    EditAttributeRequest: {
      content: {
        'application/json': components['schemas']['Attribute'];
      };
    };
    RestSearchAttributesRequest: {
      content: {
        'application/json': components['schemas']['AttributeRestSearchFilter'];
      };
    };
    AddEventRequest: {
      content: {
        'application/json': components['schemas']['EventNoId'];
      };
    };
    EditEventRequest: {
      content: {
        'application/json': components['schemas']['EventNoId'];
      };
    };
    SearchEventRequest: {
      content: {
        'application/json': {
          page?: components['schemas']['PageSearchFilter'];
          limit?: components['schemas']['LimitSearchFilter'];
          sort?: components['schemas']['SortSearchField'];
          direction?: components['schemas']['DirectionSearchField'];
          /**
           * @description Returns a minimal version of the event, only events with `attributeCount` > 0 will be returned
           * @default false
           */
          minimal?: boolean | null;
          /**
           * @description Filter events matching the given string with attributes values
           * @example covert channel
           */
          attribute?: string | null;
          eventid?: components['schemas']['EventId'];
          /**
           * Format: date
           * @description Event creation date is greater or equal
           * @example 2021-03-05
           */
          datefrom?: string | null;
          /**
           * Format: date
           * @description Event creation date is less or equal
           * @example 2021-03-05
           */
          dateuntil?: string | null;
          /**
           * @description Filter events by matching the creator organization name
           * @example CIRCL
           */
          org?: string | null;
          /**
           * @description Filter events by matching the event info text
           * @example Phishing campaing
           */
          eventinfo?: string | null;
          tag?: components['schemas']['TagName'];
          /**
           * @description Filter events by matching *any* of the event tags of a given list of tag names
           * @example [
           *   "tlp:amber",
           *   "cycat:scope=\"exploit\""
           * ]
           */
          tags?: components['schemas']['TagName'][] | null;
          distribution?: components['schemas']['DistributionLevelId'];
          sharinggroup?: components['schemas']['SharingGroupId'];
          analysis?: components['schemas']['AnalysisLevelId'];
          threatlevel?: components['schemas']['ThreatLevelId'];
          /**
           * Format: email
           * @description Filter events by matching the event creator user email
           * @example admin@admin.test
           */
          email?: string | null;
          /**
           * @description Filter events by checking if it has attributes with change proposals. Possible values: `0`, `1`
           * @example 1
           */
          hasproposal?: string | null;
          /**
           * @description Event timestamp greater or equal
           * @example 1
           */
          timestamp?: string | null;
          /**
           * @description Event publish timestamp greater or equal
           * @example 1
           */
          publish_timestamp?: string | null;
          /**
           * @description Filters on the date, anything newer than the given date in YYYY-MM-DD format is taken - non-negatable
           * @example 2020-01-20
           */
          searchDatefrom?: string | null;
          /**
           * @description Filters on the date, anything older than the given date in YYYY-MM-DD format is taken - non-negatable
           * @example 2020-01-20
           */
          searchDateuntil?: string | null;
        };
      };
    };
    RestSearchEventsRequest: {
      content: {
        'application/json': {
          page?: components['schemas']['PageSearchFilter'];
          limit?: components['schemas']['LimitSearchFilter'];
          value?: components['schemas']['AttributeValue'];
          type?: components['schemas']['AttributeType'];
          category?: components['schemas']['AttributeCategory'];
          org?: components['schemas']['OrganisationId'] | components['schemas']['OrganisationName'];
          tags?: components['schemas']['TagsRestSearchFilter'];
          event_tags?: components['schemas']['TagsRestSearchFilter'];
          searchall?: components['schemas']['SearchAllRestSearchFilter'];
          from?: components['schemas']['DateRestSearchFilter'];
          to?: components['schemas']['DateRestSearchFilter'];
          last?: components['schemas']['LastRestSearchFilter'];
          eventid?: components['schemas']['EventId'];
          withAttachments?: components['schemas']['WithAttachmentsRestSearchFilter'];
          sharinggroup?: components['schemas']['SharingGroupIDRestSearchFilter'];
          metadata?: components['schemas']['MetadataRestSearchFilter'];
          uuid?: components['schemas']['UUID'];
          publish_timestamp?: components['schemas']['Timestamp'];
          timestamp?: components['schemas']['Timestamp'];
          published?: components['schemas']['PublishedFlag'];
          enforceWarninglist?: components['schemas']['EnforceWarninglistRestSearchFilter'];
          /** @description Will only return the sharing group ID */
          sgReferenceOnly?: boolean;
          requested_attributes?: components['schemas']['RequestedAttributesRestSearchFilter'];
          includeContext?: components['schemas']['IncludeContextRestSearchFlag'];
          headerless?: components['schemas']['HeaderlessRestSearchFlag'];
          includeWarninglistHits?: components['schemas']['IncludeWarninglistHitsRestSearchFlag'];
          attackGalaxy?: components['schemas']['AttackGalaxyRestSearchFilter'];
          to_ids?: components['schemas']['ToIDS'];
          deleted?: components['schemas']['SoftDeletedFlag'];
          excludeLocalTags?: components['schemas']['ExcludeLocalTagsRestSearchFilter'];
          date?: components['schemas']['DateRestSearchFilter'];
          includeSightingdb?: components['schemas']['IncludeSightingDbRestSearchFlag'];
          tag?: components['schemas']['TagName'];
          object_relation?: components['schemas']['ObjectRelationRestSearchFilter'];
          threat_level_id?: components['schemas']['ThreatLevelId'];
          returnFormat?: components['schemas']['EventsRestSearchReturnFormat'];
        };
      };
    };
    SearchGalaxyRequest: {
      content: {
        'application/json': {
          value?: components['schemas']['GalaxyValueSearchFilter'];
        };
      };
    };
    ImportGalaxyClusterRequest: {
      content: {
        'application/json': components['schemas']['ImportGalaxyClusterItem'][];
      };
    };
    ExportGalaxyClusterRequest?: {
      content: {
        'application/json': {
          Galaxy?: {
            /** @description `true` to filter out galaxy clusters with `default=true` set. */
            default?: boolean;
            /** @description `true` to filter out galaxy clusters with `default=false` set */
            custom?: boolean;
            distribution?: components['schemas']['DistributionLevelId'];
            /**
             * @description If set to `misp-galaxy` result set is in the misp-galaxy format.
             * @enum {string}
             */
            format?: 'default' | 'misp-galaxy';
            /** @description `true` returns the response as a json file attachment, `false` returns the response in the response body. */
            download?: boolean;
          };
        };
      };
    };
    AttachGalaxyClusterRequest?: {
      content: {
        'application/json': {
          Galaxy?: {
            /**
             * Format: int32
             * @description Target galaxy cluster to attach.
             * @example 1235
             */
            target_id?: number;
          };
        };
      };
    };
    SearchGalaxyClustersRequest?: {
      content: {
        'application/json': {
          /** @enum {string} */
          context?: 'all' | 'default' | 'org' | 'deleted';
          /**
           * @description Search galaxy clusters by matching any value, description, uuid or galaxy elements values.
           * @example botnet
           */
          searchall?: string;
        };
      };
    };
    AddGalaxyClusterRequest?: {
      content: {
        'application/json': components['schemas']['GalaxyCluster'];
      };
    };
    EditGalaxyClusterRequest?: {
      content: {
        'application/json': components['schemas']['GalaxyCluster'];
      };
    };
    AddUserRequest?: {
      content: {
        'application/json': components['schemas']['UserNoId'];
      };
    };
    EditUserRequest?: {
      content: {
        'application/json': components['schemas']['User'];
      };
    };
    AddOrganisationRequest?: {
      content: {
        'application/json': components['schemas']['OrganisationNoId'];
      };
    };
    EditOrganisationRequest?: {
      content: {
        'application/json': {
          name?: components['schemas']['OrganisationName'];
          type?: components['schemas']['OrganisationType'];
          nationality?: string | null;
          sector?: string | null;
          contacts?: string | null;
          description?: string | null;
          local?: boolean | null;
          /** Format: uuid */
          uuid?: string | null;
          restricted_to_domain?: string[] | null;
        };
      };
    };
    AddServerRequest?: {
      content: {
        'application/json': components['schemas']['ServerNoId'];
      };
    };
    EditServerRequest?: {
      content: {
        'application/json': components['schemas']['Server'];
      };
    };
    EditServerSettingRequest?: {
      content: {
        'application/json': {
          value?: string | boolean | number | Record<string, never>;
        };
      };
    };
    ImportServerRequest?: {
      content: {
        'application/json': {
          name?: components['schemas']['ServerName'];
          /** @example https://misppriv.circl.lu */
          url?: string;
          uuid?: components['schemas']['UUID'];
          authkey?: components['schemas']['AuthKeyRaw'];
          Organisation?: {
            name?: components['schemas']['OrganisationName'];
          };
        };
      };
    };
    AddSharingGroupRequest?: {
      content: {
        'application/json': components['schemas']['SharingGroupNoId'];
      };
    };
    EditSharingGroupRequest?: {
      content: {
        'application/json': components['schemas']['SharingGroup'];
      };
    };
    AddFeedRequest?: {
      content: {
        'application/json': {
          name?: components['schemas']['FeedName'];
          provider?: components['schemas']['FeedProvider'];
          url?: components['schemas']['FeedUrl'];
          rules?: components['schemas']['FeedRules'];
          enabled?: components['schemas']['FeedEnabledFlag'];
          distribution?: components['schemas']['DistributionLevelId'];
          sharing_group_id?: components['schemas']['SharingGroupId'];
          tag_id?: components['schemas']['TagId'];
          source_format?: components['schemas']['FeedSourceFormat'];
          fixed_event?: components['schemas']['FeedFixedEvent'];
          delta_merge?: components['schemas']['FeedDeltaMergeFlag'];
          event_id?: components['schemas']['EventId'];
          publish?: components['schemas']['PublishedFlag'];
          override_ids?: components['schemas']['FeedOverrideIDSFlag'];
          input_source?: components['schemas']['FeedInputSource'];
          delete_local_file?: components['schemas']['FeedDeleteLocalFileFlag'];
          lookup_visible?: components['schemas']['FeedLookupVisibleFlag'];
          headers?: components['schemas']['FeedHeaders'];
          caching_enabled?: components['schemas']['FeedCachingEnabledFlag'];
          force_to_ids?: components['schemas']['FeedForceToIDSFlag'];
          orgc_id?: components['schemas']['OrganisationId'];
        };
      };
    };
    EditFeedRequest?: {
      content: {
        'application/json': {
          id?: components['schemas']['FeedId'];
          name?: components['schemas']['FeedName'];
          provider?: components['schemas']['FeedProvider'];
          url?: components['schemas']['FeedUrl'];
          rules?: components['schemas']['FeedRules'];
          enabled?: components['schemas']['FeedEnabledFlag'];
          distribution?: components['schemas']['DistributionLevelId'];
          sharing_group_id?: components['schemas']['SharingGroupId'];
          tag_id?: components['schemas']['TagId'];
          source_format?: components['schemas']['FeedSourceFormat'];
          fixed_event?: components['schemas']['FeedFixedEvent'];
          delta_merge?: components['schemas']['FeedDeltaMergeFlag'];
          event_id?: components['schemas']['EventId'];
          publish?: components['schemas']['PublishedFlag'];
          override_ids?: components['schemas']['FeedOverrideIDSFlag'];
          input_source?: components['schemas']['FeedInputSource'];
          delete_local_file?: components['schemas']['FeedDeleteLocalFileFlag'];
          lookup_visible?: components['schemas']['FeedLookupVisibleFlag'];
          headers?: components['schemas']['FeedHeaders'];
          caching_enabled?: components['schemas']['FeedCachingEnabledFlag'];
          force_to_ids?: components['schemas']['FeedForceToIDSFlag'];
          orgc_id?: components['schemas']['OrganisationId'];
        };
      };
    };
    WarninglistsSearchRequest?: {
      content: {
        'application/x-www-form-urlencoded': {
          /** @description Search term to be used to match warninglists name, description or type. */
          value?: string | null;
          enabled?: boolean | null;
        };
      };
    };
    WarninglistsToggleEnableRequest?: {
      content: {
        'application/x-www-form-urlencoded': {
          id?: components['schemas']['WarninglistsIdFilter'];
          name?: components['schemas']['WarninglistsNameFilter'];
          enabled?: boolean;
        };
      };
    };
    WarninglistCheckValuesRequest?: {
      content: {
        'application/json': string[];
      };
    };
    ToggleEnableNoticelistRequest?: {
      content: {
        'application/json': {
          Noticelist?: {
            /**
             * @description Id of the noticelist to enable/disable.
             * @example 1
             */
            data?: number;
          };
        };
      };
    };
    RestSearchObjectsRequest: {
      content: {
        'application/json': components['schemas']['ObjectRestSearchFilter'];
      };
    };
    AddObjectRequest?: {
      content: {
        'application/json': {
          Attribute?: {
            category?: components['schemas']['AttributeCategory'];
            value?: components['schemas']['AttributeValue'];
            to_ids?: components['schemas']['ToIDS'];
            disable_correlation?: components['schemas']['DisableCorrelationFlag'];
            distribution?: components['schemas']['DistributionLevelId'];
            comment?: components['schemas']['AttributeComment'];
            object_relation?: components['schemas']['ObjectRelation'];
          }[];
        };
      };
    };
    AddSightingsRequest?: {
      content: {
        'application/json': {
          values?: components['schemas']['AttributeValue'][];
          timestamp?: components['schemas']['NullableTimestamp'];
          filters?: components['schemas']['AttributeRestSearchFilter'];
        };
      };
    };
    AddTagRequest?: {
      content: {
        'application/json': components['schemas']['TagNoId'];
      };
    };
    EditTagRequest?: {
      content: {
        'application/json': components['schemas']['TagNoId'];
      };
    };
    GetLogsRequest?: {
      content: {
        'application/json': {
          page?: components['schemas']['PageSearchFilter'];
          limit?: components['schemas']['LimitSearchFilter'];
          id?: components['schemas']['LogId'];
          title?: components['schemas']['LogTitle'];
          created?:
            | components['schemas']['DateRestSearchFilter']
            | components['schemas']['DateIntervalRestSearchFilter'];
          model?: components['schemas']['ModelName'];
          model_id?: components['schemas']['ModelId'];
          action?: components['schemas']['LogActionType'];
          user_id?: components['schemas']['UserId'];
          /**
           * @description Text search for log change property
           * @example %name () => (ORGNAME)%
           */
          change?: string;
          /** Format: email */
          email?: string;
          /**
           * @description Text search for log organization name property
           * @example ORG_%
           */
          org?: string;
          /**
           * @description Text search for log change property
           * @example %updated by User%
           */
          description?: string;
          /** @description Text search for log ip property */
          ip?: string;
        };
      };
    };
    GetAuthKeyRequest?: {
      content: {
        'application/json': {
          page?: components['schemas']['PageSearchFilter'];
          limit?: components['schemas']['LimitSearchFilter'];
          id?: components['schemas']['AuthKeyId'];
          uuid?: components['schemas']['UUID'];
          /** @description Search term matching the first 4 characers of the authkey */
          authkey_start?: string;
          /** @description Search term matching the last 4 characers of the authkey */
          authkey_end?: string;
          created?: components['schemas']['DateRestSearchFilter'];
          expiration?: components['schemas']['DateRestSearchFilter'];
          read_only?: components['schemas']['IsReadOnly'];
          user_id?: components['schemas']['UserId'];
          comment?: string;
          /**
           * @description Stringified JSON array of the IP addresses.
           * @example ["127.0.0.1","127.0.0.2"]
           */
          allowed_ips?: string;
          last_used?: components['schemas']['DateRestSearchFilter'];
        };
      };
    };
    AddAuthKeyRequest?: {
      content: {
        'application/json': {
          uuid?: components['schemas']['UUID'];
          read_only?: components['schemas']['IsReadOnly'];
          user_id?: components['schemas']['UserId'];
          comment?: string;
          allowed_ips?: string[] | null;
        };
      };
    };
    EditAuthKeyRequest?: {
      content: {
        'application/json': {
          read_only?: components['schemas']['IsReadOnly'];
          comment?: string;
          allowed_ips?: string[] | null;
        };
      };
    };
    GetUserSettingRequest?: {
      content: {
        'application/json': {
          id?: components['schemas']['UserSettingId'];
          setting?: components['schemas']['UserSettingName'];
          user_id?: components['schemas']['UserId'];
        };
      };
    };
    SetUserSettingRequest?: {
      content: {
        'application/json':
          | components['schemas']['DashboardUserSetting']
          | components['schemas']['PublishAlertFilterUserSetting']
          | components['schemas']['DashboardAccessUserSetting']
          | components['schemas']['HomepageUserSetting']
          | components['schemas']['DefaultRestSearchParametersUserSetting']
          | components['schemas']['TagNumbericalValueOverrideUserSetting']
          | components['schemas']['EventIndexHideColumnsUserSetting'];
      };
    };
  };
  headers: {
    /** @description Result set count */
    'X-Result-Count': number;
    /** @description Export module used */
    'X-Export-Module-Used':
      | 'json'
      | 'xml'
      | 'csv'
      | 'text'
      | 'download'
      | 'stix'
      | 'stix2'
      | 'stix-json'
      | 'attack'
      | 'attack-sightings'
      | 'cache'
      | 'count'
      | 'hashes'
      | 'netfilter'
      | 'opendata'
      | 'openioc'
      | 'rpz'
      | 'snort'
      | 'suricata'
      | 'yara'
      | 'yara-json';
    /** @description Response format */
    'X-Response-Format':
      | 'json'
      | 'xml'
      | 'csv'
      | 'text'
      | 'download'
      | 'stix'
      | 'stix2'
      | 'stix-json'
      | 'attack'
      | 'attack-sightings'
      | 'cache'
      | 'count'
      | 'hashes'
      | 'netfilter'
      | 'opendata'
      | 'openioc'
      | 'rpz'
      | 'snort'
      | 'suricata'
      | 'yara'
      | 'yara-json';
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * [restSearch] Get a filtered and paginated list of attributes
   * @description **This is the recommended endpoint for searching attributes.**
   */
  restSearchAttributes: {
    requestBody: components['requestBodies']['RestSearchAttributesRequest'];
    responses: {
      200: components['responses']['AttributesRestSearchResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add an attribute */
  addAttribute: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
      };
    };
    requestBody: components['requestBodies']['AddAttributeRequest'];
    responses: {
      200: components['responses']['AttributeResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit an attribute */
  editAttribute: {
    parameters: {
      path: {
        attributeId: components['parameters']['attributeIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditAttributeRequest'];
    responses: {
      200: components['responses']['AttributeResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete an attribute */
  deleteAttribute: {
    parameters: {
      path: {
        attributeId: components['parameters']['attributeIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteAttributeResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Restore an attribute */
  restoreAttribute: {
    parameters: {
      path: {
        attributeId: components['parameters']['attributeIdParameter'];
      };
    };
    responses: {
      200: components['responses']['AttributeResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add a tag to an attribute */
  tagAttribute: {
    parameters: {
      path: {
        attributeId: components['parameters']['attributeIdParameter'];
        tagId: components['parameters']['tagIdParameter'];
        local: components['parameters']['localParameter'];
      };
    };
    responses: {
      200: components['responses']['AddAttributeTagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Remove a tag from an attribute */
  untagAttribute: {
    parameters: {
      path: {
        attributeId: components['parameters']['attributeIdParameter'];
        tagId: components['parameters']['tagIdParameter'];
      };
    };
    responses: {
      200: components['responses']['RemoveAttributeTagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a list of attributes */
  getAttributes: {
    responses: {
      200: components['responses']['AttributeListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get an attribute by ID */
  getAttributeById: {
    parameters: {
      path: {
        attributeId: components['parameters']['attributeIdParameter'];
      };
    };
    responses: {
      200: components['responses']['AttributeResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get the count of attributes per category */
  getAttributeStatistics: {
    parameters: {
      path: {
        context: components['parameters']['attributeStatisticsContextParameter'];
        percentage: components['parameters']['attributeStatisticsPercentageParameter'];
      };
    };
    responses: {
      200: components['responses']['AttributeStatisticsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a list of the available attribute types */
  describeAttributeTypes: {
    responses: {
      200: components['responses']['DescribeAttributeTypesResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /**
   * [restSearch] Get a filtered and paginated list of events
   * @description **This is the recommended endpoint for searching events.**
   */
  restSearchEvents: {
    requestBody: components['requestBodies']['RestSearchEventsRequest'];
    responses: {
      200: components['responses']['EventsRestSearchResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add event */
  addEvent: {
    requestBody: components['requestBodies']['AddEventRequest'];
    responses: {
      200: components['responses']['AddEventResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit event */
  editEvent: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditEventRequest'];
    responses: {
      200: components['responses']['EditEventResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete event */
  deleteEvent: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteEventResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a list of events */
  getEvents: {
    responses: {
      200: components['responses']['ExtendedEventListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Search events */
  searchEvents: {
    requestBody: components['requestBodies']['SearchEventRequest'];
    responses: {
      200: components['responses']['ExtendedEventListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get event by ID */
  getEventById: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
      };
    };
    responses: {
      200: components['responses']['ExtendedEventResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Publish an event */
  publishEvent: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
      };
    };
    responses: {
      200: components['responses']['PublishEventResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Unpublish an event */
  unpublishEvent: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
      };
    };
    responses: {
      200: components['responses']['UnpublishEventResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add event tag */
  tagEvent: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
        tagId: components['parameters']['tagIdParameter'];
        local: components['parameters']['localParameter'];
      };
    };
    responses: {
      200: components['responses']['AddEventTagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Remove event tag */
  untagEvent: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
        tagId: components['parameters']['tagIdParameter'];
      };
    };
    responses: {
      200: components['responses']['RemoveEventTagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get galaxies */
  getGalaxies: {
    responses: {
      200: components['responses']['GalaxyListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Search galaxies */
  searchGalaxies: {
    requestBody: components['requestBodies']['SearchGalaxyRequest'];
    responses: {
      200: components['responses']['GalaxyListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get galaxy by ID */
  getGalaxyById: {
    parameters: {
      path: {
        galaxyId: components['parameters']['galaxyIdParameter'];
      };
    };
    responses: {
      200: components['responses']['ExtendedGalaxyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Force update the galaxies with the galaxy json definitions */
  updateGalaxies: {
    responses: {
      200: components['responses']['UpdateGalaxiesResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete a galaxy */
  deleteGalaxy: {
    parameters: {
      path: {
        galaxyId: components['parameters']['galaxyIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteGalaxyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Import a galaxy cluster */
  importGalaxyCluster: {
    requestBody: components['requestBodies']['ImportGalaxyClusterRequest'];
    responses: {
      200: components['responses']['ImportGalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Export galaxy clusters */
  exportGalaxyClusters: {
    parameters: {
      path: {
        galaxyId: components['parameters']['galaxyIdParameter'];
      };
    };
    requestBody: components['requestBodies']['ExportGalaxyClusterRequest'];
    responses: {
      200: components['responses']['ExportGalaxyClustersResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Attach the galaxy cluster tag a given entity */
  attachGalaxyCluster: {
    parameters: {
      path: {
        attachTargetId: components['parameters']['attachTargetIdParameter'];
        attachTargetType: components['parameters']['attachTargetTypeParameter'];
        local: components['parameters']['localParameter'];
      };
    };
    requestBody: components['requestBodies']['AttachGalaxyClusterRequest'];
    responses: {
      200: components['responses']['AttachGalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add galaxy cluster */
  addGalaxyCluster: {
    parameters: {
      path: {
        galaxyId: components['parameters']['galaxyIdParameter'];
      };
    };
    requestBody: components['requestBodies']['AddGalaxyClusterRequest'];
    responses: {
      200: components['responses']['GalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit galaxy cluster */
  editGalaxyCluster: {
    parameters: {
      path: {
        galaxyClusterId: components['parameters']['galaxyClusterIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditGalaxyClusterRequest'];
    responses: {
      200: components['responses']['GalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get galaxy clusters */
  getGalaxyClusters: {
    parameters: {
      path: {
        galaxyId: components['parameters']['galaxyIdParameter'];
      };
    };
    responses: {
      200: components['responses']['GalaxyClusterListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Search galaxy clusters */
  searchGalaxyClusters: {
    parameters: {
      path: {
        galaxyId: components['parameters']['galaxyIdParameter'];
      };
    };
    requestBody: components['requestBodies']['SearchGalaxyClustersRequest'];
    responses: {
      200: components['responses']['GalaxyClusterListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get galaxy cluster by ID */
  getGalaxyClusterById: {
    parameters: {
      path: {
        galaxyClusterId: components['parameters']['galaxyClusterIdParameter'];
      };
    };
    responses: {
      200: components['responses']['ExtendedGalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Publish galaxy cluster */
  publishGalaxyCluster: {
    parameters: {
      path: {
        galaxyClusterId: components['parameters']['galaxyClusterIdParameter'];
      };
    };
    responses: {
      200: components['responses']['PublishGalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Unpublish galaxy cluster */
  unpublishGalaxyCluster: {
    parameters: {
      path: {
        galaxyClusterId: components['parameters']['galaxyClusterIdParameter'];
      };
    };
    responses: {
      200: components['responses']['UnpublishGalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete galaxy cluster */
  deleteGalaxyCluster: {
    parameters: {
      path: {
        galaxyClusterId: components['parameters']['galaxyClusterIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteGalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Restore galaxy cluster */
  restoreGalaxyCluster: {
    parameters: {
      path: {
        galaxyClusterId: components['parameters']['galaxyClusterIdParameter'];
      };
    };
    responses: {
      200: components['responses']['RestoreGalaxyClusterResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Reset user password */
  resetUserPassword: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
        firstTimeReset: components['parameters']['firstTimeResetParameter'];
      };
    };
    responses: {
      200: components['responses']['ResetUserPasswordResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add user */
  addUser: {
    requestBody: components['requestBodies']['AddUserRequest'];
    responses: {
      200: components['responses']['UserResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit user */
  editUser: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditUserRequest'];
    responses: {
      200: components['responses']['UserResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete user */
  deleteUser: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteUserResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get users */
  getUsers: {
    responses: {
      200: components['responses']['UserListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get user by ID */
  getUserById: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
      };
    };
    responses: {
      200: components['responses']['ExtendedUserResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete user TOTP */
  deleteUserTotp: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteUserTotpResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundUserTotpDeleteResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add organization */
  addOrganisation: {
    requestBody: components['requestBodies']['AddOrganisationRequest'];
    responses: {
      200: components['responses']['OrganisationResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit organization */
  editOrganisation: {
    parameters: {
      path: {
        organisationId: components['parameters']['organisationIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditOrganisationRequest'];
    responses: {
      200: components['responses']['OrganisationResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete organization */
  deleteOrganisation: {
    parameters: {
      path: {
        organisationId: components['parameters']['organisationIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteOrganisationResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get instance logs */
  getLogs: {
    requestBody: components['requestBodies']['GetLogsRequest'];
    responses: {
      200: components['responses']['GetLogsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get organizations */
  getOrganisations: {
    responses: {
      200: components['responses']['OrganisationListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get organization by ID */
  getOrganisationById: {
    parameters: {
      path: {
        organisationId: components['parameters']['organisationIdParameter'];
      };
    };
    responses: {
      200: components['responses']['OrganisationResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add server */
  addServer: {
    requestBody: components['requestBodies']['AddServerRequest'];
    responses: {
      200: components['responses']['ServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit server */
  editServer: {
    parameters: {
      path: {
        serverId: components['parameters']['serverIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditServerRequest'];
    responses: {
      200: components['responses']['ServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete server */
  deleteServer: {
    parameters: {
      path: {
        serverId: components['parameters']['serverIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get servers */
  getServers: {
    responses: {
      200: components['responses']['ServerListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Pull server */
  pullServer: {
    parameters: {
      path: {
        serverId: components['parameters']['serverIdParameter'];
        pullTechnique: components['parameters']['pullTechniqueParameter'];
      };
    };
    responses: {
      200: components['responses']['PullServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Push server */
  pushServer: {
    parameters: {
      path: {
        serverId: components['parameters']['serverIdParameter'];
        pushTechnique: components['parameters']['pushTechniqueParameter'];
      };
    };
    responses: {
      200: components['responses']['PushServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get current instance version */
  getServerVersion: {
    responses: {
      200: components['responses']['ServerVersionResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get current instance PyMISP version */
  getPyMISPVersion: {
    responses: {
      200: components['responses']['ServerPyMISPVersionResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get current instance settings and diagnostics */
  getServerSettings: {
    responses: {
      200: components['responses']['ServerSettingsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get workers */
  getWorkers: {
    responses: {
      200: components['responses']['GetWorkersResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Start worker */
  startWorker: {
    parameters: {
      path: {
        workerType: components['parameters']['workerTypeParameter'];
      };
    };
    responses: {
      200: components['responses']['StartWorkerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Stop worker */
  stopWorker: {
    parameters: {
      path: {
        workerPid: components['parameters']['workerPidParameter'];
      };
    };
    responses: {
      200: components['responses']['StopWorkerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Kill all workers */
  killAllWorkers: {
    responses: {
      200: components['responses']['KillAllWorkersResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Restart workers */
  restartWorkers: {
    responses: {
      200: components['responses']['RestartWorkersResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Restart dead workers */
  restartDeadWorkers: {
    responses: {
      200: components['responses']['RestartDeadWorkersResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Update server */
  updateServer: {
    responses: {
      200: components['responses']['UpdateServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Cache server */
  cacheServer: {
    responses: {
      200: components['responses']['CacheServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Create sync */
  createSync: {
    responses: {
      200: components['responses']['CreateSyncResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get instance UUID */
  getServerUuid: {
    responses: {
      200: components['responses']['GetInstanceUUIDResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get server setting by name */
  getServerSetting: {
    parameters: {
      path: {
        settingName: components['parameters']['settingNameParameter'];
      };
    };
    responses: {
      200: components['responses']['GetServerSettingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit server setting */
  editServerSetting: {
    parameters: {
      path: {
        settingName: components['parameters']['settingNameParameter'];
      };
    };
    requestBody: components['requestBodies']['EditServerSettingRequest'];
    responses: {
      200: components['responses']['EditServerSettingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Import server */
  importServer: {
    requestBody: components['requestBodies']['ImportServerRequest'];
    responses: {
      200: components['responses']['ServerResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add a sharing group */
  addSharingGroup: {
    requestBody: components['requestBodies']['AddSharingGroupRequest'];
    responses: {
      200: components['responses']['SharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit a sharing group */
  editSharingGroup: {
    parameters: {
      path: {
        sharingGroupId: components['parameters']['sharingGroupIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditSharingGroupRequest'];
    responses: {
      200: components['responses']['SharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete a sharing group */
  deleteSharingGroup: {
    parameters: {
      path: {
        sharingGroupId: components['parameters']['sharingGroupIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteSharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a list of sharing groups */
  getSharingGroup: {
    responses: {
      200: components['responses']['SharingGroupListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a sharing group by ID */
  getSharingGroupById: {
    parameters: {
      path: {
        sharingGroupId: components['parameters']['sharingGroupIdParameter'];
      };
    };
    responses: {
      200: components['responses']['SharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add an organization to a sharing group */
  addOrganisationToSharingGroup: {
    parameters: {
      path: {
        sharingGroupId: components['parameters']['sharingGroupIdParameter'];
        organisationId: components['parameters']['organisationIdParameter'];
      };
    };
    responses: {
      200: components['responses']['AddOrganisationToSharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Remove an organization from a sharing group */
  removeOrganisationFromSharingGroup: {
    parameters: {
      path: {
        sharingGroupId: components['parameters']['sharingGroupIdParameter'];
        organisationId: components['parameters']['organisationIdParameter'];
      };
    };
    responses: {
      200: components['responses']['RemoveOrganisationFromSharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add a server to a sharing group */
  addServerToSharingGroup: {
    parameters: {
      path: {
        sharingGroupId: components['parameters']['sharingGroupIdParameter'];
        serverId: components['parameters']['serverIdParameter'];
      };
    };
    responses: {
      200: components['responses']['AddServerToSharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Remove a server from a sharing group */
  removeServerFromSharingGroup: {
    parameters: {
      path: {
        sharingGroupServerId: components['parameters']['sharingGroupServerIdParameter'];
        serverId: components['parameters']['serverIdParameter'];
      };
    };
    responses: {
      200: components['responses']['RemoveServerFromSharingGroupResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a list of feeds */
  getFeeds: {
    responses: {
      200: components['responses']['FeedListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a feed by ID */
  getFeedById: {
    parameters: {
      path: {
        feedId: components['parameters']['feedIdParameter'];
      };
    };
    responses: {
      200: components['responses']['FeedResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add a feed */
  addFeed: {
    requestBody: components['requestBodies']['AddFeedRequest'];
    responses: {
      200: components['responses']['FeedResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit a feed */
  editFeed: {
    parameters: {
      path: {
        feedId: components['parameters']['feedIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditFeedRequest'];
    responses: {
      200: components['responses']['FeedResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Enable feed */
  enableFeed: {
    parameters: {
      path: {
        feedId: components['parameters']['feedIdParameter'];
      };
    };
    responses: {
      200: components['responses']['EnableFeedResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Disable feed */
  disableFeed: {
    parameters: {
      path: {
        feedId: components['parameters']['feedIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DisableFeedResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Cache feeds */
  cacheFeeds: {
    parameters: {
      path: {
        cacheFeedsScope: components['parameters']['cacheFeedsScopeParameter'];
      };
    };
    responses: {
      200: components['responses']['CacheFeedsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Fetch from feed by ID */
  fetchFromFeed: {
    parameters: {
      path: {
        feedId: components['parameters']['feedIdParameter'];
      };
    };
    responses: {
      200: components['responses']['FetchFromFeedResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Fetch from all feeds */
  fetchFromAllFeeds: {
    responses: {
      200: components['responses']['FetchFromAllFeedsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a list of warninglists */
  getWarninglists: {
    responses: {
      200: components['responses']['WarninglistListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Search warninglists */
  searchWarninglists: {
    requestBody: components['requestBodies']['WarninglistsSearchRequest'];
    responses: {
      200: components['responses']['WarninglistListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Enable/disable warninglists */
  toggleEnableWarninglist: {
    requestBody: components['requestBodies']['WarninglistsToggleEnableRequest'];
    responses: {
      200: components['responses']['WarninglistToggleEnabledResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get warninglist by ID */
  getWarninglistById: {
    parameters: {
      path: {
        warninglistId: components['parameters']['warninglistIdParameter'];
      };
    };
    responses: {
      200: components['responses']['WarninglistResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Check if a list of values matches any warninglists */
  checkValueWarninglistsMatches: {
    requestBody: components['requestBodies']['WarninglistCheckValuesRequest'];
    responses: {
      200: components['responses']['WarninglistMatchListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Update warninglists */
  updateWarninglists: {
    responses: {
      200: components['responses']['UpdateWarninglistsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a list of noticelists */
  getNoticelists: {
    responses: {
      200: components['responses']['NoticelistListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a noticelist by ID */
  getNoticelistById: {
    parameters: {
      path: {
        noticelistId: components['parameters']['noticelistIdParameter'];
      };
    };
    responses: {
      200: components['responses']['NoticelistResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Enable/disable noticelist */
  toggleEnableNoticelist: {
    parameters: {
      path: {
        noticelistId: components['parameters']['noticelistIdParameter'];
      };
    };
    responses: {
      200: components['responses']['NoticelistToggleEnableResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Update noticelists */
  updateNoticelists: {
    responses: {
      200: components['responses']['UpdateNoticelistsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /**
   * [restSearch] Get a filtered and paginated list of objects
   * @description **This is the recommended endpoint for searching objects.**
   */
  restSearchObjects: {
    requestBody: components['requestBodies']['RestSearchObjectsRequest'];
    responses: {
      200: components['responses']['ObjectsRestSearchResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add an object to an event */
  addObject: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
        objectTemplateId: components['parameters']['objectTemplateIdParameter'];
      };
    };
    requestBody: components['requestBodies']['AddObjectRequest'];
    responses: {
      200: components['responses']['ObjectResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get object by ID */
  getObjectById: {
    parameters: {
      path: {
        objectId: components['parameters']['objectIdParameter'];
      };
    };
    responses: {
      200: components['responses']['ExtendedObjectResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete object */
  deleteObject: {
    parameters: {
      path: {
        objectId: components['parameters']['objectIdParameter'];
        hardDelete: components['parameters']['hardDeleteParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteObjectResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get sightings by event ID */
  getSightingsByEventId: {
    parameters: {
      path: {
        eventId: components['parameters']['eventIdParameter'];
      };
    };
    responses: {
      200: components['responses']['SightingListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add sightings of a list of values */
  addSightingByValue: {
    requestBody: components['requestBodies']['AddSightingsRequest'];
    responses: {
      200: components['responses']['SightingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add sighting of an attribute */
  addSighting: {
    parameters: {
      path: {
        attributeId: components['parameters']['attributeIdParameter'];
      };
    };
    responses: {
      200: components['responses']['SightingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete sighting */
  deleteSighting: {
    parameters: {
      path: {
        sightingId: components['parameters']['sightingIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteSightingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get tags */
  getTags: {
    responses: {
      200: components['responses']['TagListResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get tag by ID */
  getTagById: {
    parameters: {
      path: {
        tagId: components['parameters']['tagIdParameter'];
      };
    };
    responses: {
      200: components['responses']['TagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add tag */
  addTag: {
    requestBody: components['requestBodies']['AddTagRequest'];
    responses: {
      200: components['responses']['TagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete tag */
  deleteTag: {
    parameters: {
      path: {
        tagId: components['parameters']['tagIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteTagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit tag */
  editTag: {
    parameters: {
      path: {
        tagId: components['parameters']['tagIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditTagRequest'];
    responses: {
      200: components['responses']['EditTagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Search tag */
  searchTag: {
    parameters: {
      path: {
        tagSearchTerm: components['parameters']['tagSearchTermParameter'];
      };
    };
    responses: {
      200: components['responses']['SearchTagResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get auth keys */
  getAuthKeys: {
    responses: {
      200: components['responses']['GetAuthKeysResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Search auth keys */
  searchAuthKeys: {
    requestBody: components['requestBodies']['GetAuthKeyRequest'];
    responses: {
      200: components['responses']['GetAuthKeysResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Add auth keys */
  addAuthKey: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
      };
    };
    requestBody: components['requestBodies']['AddAuthKeyRequest'];
    responses: {
      200: components['responses']['AddAuthKeyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** View auth key */
  getAuthKeyById: {
    parameters: {
      path: {
        authKeyId: components['parameters']['authKeyIdParameter'];
      };
    };
    responses: {
      200: components['responses']['AuthKeyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Edit auth key */
  editAuthKey: {
    parameters: {
      path: {
        authKeyId: components['parameters']['authKeyIdParameter'];
      };
    };
    requestBody: components['requestBodies']['EditAuthKeyRequest'];
    responses: {
      200: components['responses']['AuthKeyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete auth key */
  deleteAuthKey: {
    parameters: {
      path: {
        authKeyId: components['parameters']['authKeyIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteAuthKeyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get user settings */
  getUserSettings: {
    responses: {
      200: components['responses']['GetUserSettingsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Search user settings */
  searchUserSettings: {
    requestBody: components['requestBodies']['GetUserSettingRequest'];
    responses: {
      200: components['responses']['GetUserSettingsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get user setting by id */
  getUserSettingById: {
    parameters: {
      path: {
        userSettingId: components['parameters']['userSettingIdParameter'];
      };
    };
    responses: {
      200: components['responses']['UserSettingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Set user setting */
  setUserSetting: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
        userSettingName: components['parameters']['userSettingNameParameter'];
      };
    };
    requestBody: components['requestBodies']['SetUserSettingRequest'];
    responses: {
      200: components['responses']['UserSettingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get user setting by id */
  getUserSettingByName: {
    parameters: {
      path: {
        userId: components['parameters']['userIdParameter'];
        userSettingName: components['parameters']['userSettingNameParameter'];
      };
    };
    responses: {
      200: components['responses']['UserSettingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Delete user setting by id */
  deleteUserSettingById: {
    parameters: {
      path: {
        userSettingId: components['parameters']['userSettingIdParameter'];
      };
    };
    responses: {
      200: components['responses']['DeleteUserSettingResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get taxonomies */
  getTaxonomies: {
    responses: {
      200: components['responses']['GetTaxonomiesResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a taxonomy by ID */
  getTaxonomyById: {
    responses: {
      200: components['responses']['TaxonomiesResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Enable taxonomy */
  enableTaxonomy: {
    responses: {
      200: components['responses']['EnableTaxonomyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Disable taxonomy */
  disableTaxonomy: {
    responses: {
      200: components['responses']['DisableTaxonomyResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Update taxonomies */
  updateTaxonomies: {
    responses: {
      200: components['responses']['UpdateTaxonomiesResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Get a taxonomy extended with tags used in events and attributes. */
  getTaxonomyTags: {
    responses: {
      200: components['responses']['GetTaxonomyTagsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
  /** Export taxonomy. */
  exportTaxonomy: {
    responses: {
      200: components['responses']['ExportTaxonomyTagsResponse'];
      403: components['responses']['UnauthorizedApiErrorResponse'];
      404: components['responses']['NotFoundApiErrorResponse'];
      default: components['responses']['ApiErrorResponse'];
    };
  };
}
