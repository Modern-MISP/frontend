# include:
#   - template: Code-Quality.gitlab-ci.yml

stages:
  - podman
  - pre-build
  - build
  - test
  - deploy

default:
  tags:
    - kit-intranet # Tag is required to make the CI runner accept the jobs
  image:
    name: node:latest
    pull_policy: if-not-present

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

# === docker stage ===
podman:
  stage: podman
  image:
    name: quay.io/podman/stable:latest
    pull_policy: if-not-present
  tags:
    - dind
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    # Install podman-docker and docker-compose for using docker-compose with podman
    - sudo dnf -y install dnf-plugins-core
    - sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
    - sudo dnf -y install podman-docker docker-compose-plugin
    # Create environment files
    - cp misp-docker/template.env misp-docker/.env
    - cat cypress.env.template.json | sed 's/<your admin token>/$MISP01_AUTH_TOKEN/' > cypress.env.json
    # Start podman socket
    - mkdir /run/podman
    - podman system service --time 0 unix:///run/podman/podman.sock &
    # Start containers via compose
    - podman compose up cypress
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - /var/cache/dnf
  needs: []

# === pre-build stage ===

install_dependencies:
  stage: pre-build
  script:
    - npm ci --cache .npm --prefer-offline
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - .svelte-kit
  needs: []

# === build stage ===

build_production:
  stage: build
  script:
    - cp $ENV_FILE .env
    - npm run build -- --mode production
    - mv build dist_production
  artifacts:
    expire_in: 1 week
    paths:
      - dist_production
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  needs:
    - install_dependencies

build_staging:
  stage: build
  script:
    - cp $ENV_FILE .env
    - npm run build -- --mode staging
    - mv build dist_staging
  artifacts:
    expire_in: 1 day
    paths:
      - dist_staging
  needs:
    - install_dependencies

docs:
  stage: build
  trigger:
    include: .gitlab/docs.yml
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  rules:
    - if: $CI_COMMIT_BRANCH == "docs"
  needs:
    - install_dependencies

# === test stage ===

unit_tests:
  stage: test
  script:
    - npx vitest run
  coverage: /All files[^|]*\|[^|]*\|\s+([\d\.]+)/
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  needs:
    - install_dependencies

prettier:
  stage: test
  script:
    - npx prettier --check . "!misp-docker/**"
  needs:
    - install_dependencies

eslint:
  stage: test
  script:
    - npx eslint --format gitlab .
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
  needs:
    - install_dependencies

svelte-check:
  stage: test
  script:
    - cp $ENV_FILE .env
    - npm run check
  needs:
    - install_dependencies

# === deploy stage ===

ftp_deploy:
  stage: deploy
  image: hub.cert.kit.edu:5000/kit-cert-debrelease:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  environment:
    name: Staging
  script:
    - apt-get update -qq && apt-get install -y -qq lftp
    - lftp -c "set ftp:ssl-allow yes; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST; mirror -Rnev ./dist_staging/ ./ --parallel=10 -X .htaccess"
  needs:
    - build_staging
